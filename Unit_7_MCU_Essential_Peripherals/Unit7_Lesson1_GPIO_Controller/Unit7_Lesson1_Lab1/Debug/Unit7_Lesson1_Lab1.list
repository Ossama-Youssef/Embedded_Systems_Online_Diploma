
Unit7_Lesson1_Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000200  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000330  08000338  00010338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000330  08000330  00010338  2**0
                  CONTENTS
  4 .ARM          00000000  08000330  08000330  00010338  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000330  08000338  00010338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000330  08000330  00010330  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000334  08000334  00010334  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010338  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000338  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000338  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00010338  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000a4d  00000000  00000000  00010361  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000001d0  00000000  00000000  00010dae  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000110  00000000  00000000  00010f7e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 00000060  00000000  00000000  00011090  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000048  00000000  00000000  000110f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00001d44  00000000  00000000  00011138  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   00000670  00000000  00000000  00012e7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    00008246  00000000  00000000  000134ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  0001b732  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000000c0  00000000  00000000  0001b7b0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08000318 	.word	0x08000318

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08000318 	.word	0x08000318

08000170 <main>:

// function to make delay
void wait(int x);

int main(void)
{
 8000170:	b580      	push	{r7, lr}
 8000172:	af00      	add	r7, sp, #0
	Clock_init();
 8000174:	f000 f850 	bl	8000218 <Clock_init>
	GPIO_init();
 8000178:	f000 f828 	bl	80001cc <GPIO_init>

	while(1)
	{
		// PORTA Pin 1 connected to External push up resistor
		// take action when read 0 from pin
		if(READ_BIT(GPIOA_IDR,1,1) == 0)
 800017c:	4b11      	ldr	r3, [pc, #68]	; (80001c4 <main+0x54>)
 800017e:	681b      	ldr	r3, [r3, #0]
 8000180:	f003 0302 	and.w	r3, r3, #2
 8000184:	2b00      	cmp	r3, #0
 8000186:	d10c      	bne.n	80001a2 <main+0x32>
		{
			TOGGLE_BIT(GPIOB_ODR,1,1); // toogle the led
 8000188:	4b0f      	ldr	r3, [pc, #60]	; (80001c8 <main+0x58>)
 800018a:	681b      	ldr	r3, [r3, #0]
 800018c:	4a0e      	ldr	r2, [pc, #56]	; (80001c8 <main+0x58>)
 800018e:	f083 0302 	eor.w	r3, r3, #2
 8000192:	6013      	str	r3, [r2, #0]
			while(READ_BIT(GPIOA_IDR,1,1) == 0); // single press
 8000194:	bf00      	nop
 8000196:	4b0b      	ldr	r3, [pc, #44]	; (80001c4 <main+0x54>)
 8000198:	681b      	ldr	r3, [r3, #0]
 800019a:	f003 0302 	and.w	r3, r3, #2
 800019e:	2b00      	cmp	r3, #0
 80001a0:	d0f9      	beq.n	8000196 <main+0x26>
		}
		if(READ_BIT(GPIOA_IDR,1,13) == 1)
 80001a2:	4b08      	ldr	r3, [pc, #32]	; (80001c4 <main+0x54>)
 80001a4:	681b      	ldr	r3, [r3, #0]
 80001a6:	0b5b      	lsrs	r3, r3, #13
 80001a8:	f003 0301 	and.w	r3, r3, #1
 80001ac:	2b01      	cmp	r3, #1
 80001ae:	d105      	bne.n	80001bc <main+0x4c>
		{
			// multipress
			TOGGLE_BIT(GPIOB_ODR,1,13); // toogle the led
 80001b0:	4b05      	ldr	r3, [pc, #20]	; (80001c8 <main+0x58>)
 80001b2:	681b      	ldr	r3, [r3, #0]
 80001b4:	4a04      	ldr	r2, [pc, #16]	; (80001c8 <main+0x58>)
 80001b6:	f483 5300 	eor.w	r3, r3, #8192	; 0x2000
 80001ba:	6013      	str	r3, [r2, #0]

		}
		wait(1);
 80001bc:	2001      	movs	r0, #1
 80001be:	f000 f83f 	bl	8000240 <wait>
		if(READ_BIT(GPIOA_IDR,1,1) == 0)
 80001c2:	e7db      	b.n	800017c <main+0xc>
 80001c4:	40010808 	.word	0x40010808
 80001c8:	40010c0c 	.word	0x40010c0c

080001cc <GPIO_init>:
	}

}
void GPIO_init()
{
 80001cc:	b480      	push	{r7}
 80001ce:	af00      	add	r7, sp, #0
	// Configuration of input and output pins
	// configure port A pin 1 as highZ input
	SET_BIT(GPIOA_CRL,0b0100,4);
 80001d0:	4b0d      	ldr	r3, [pc, #52]	; (8000208 <GPIO_init+0x3c>)
 80001d2:	681b      	ldr	r3, [r3, #0]
 80001d4:	4a0c      	ldr	r2, [pc, #48]	; (8000208 <GPIO_init+0x3c>)
 80001d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001da:	6013      	str	r3, [r2, #0]
	// configure port B pin 1 as push pull output
	SET_BIT(GPIOB_CRL,0b0001,4);
 80001dc:	4b0b      	ldr	r3, [pc, #44]	; (800020c <GPIO_init+0x40>)
 80001de:	681b      	ldr	r3, [r3, #0]
 80001e0:	4a0a      	ldr	r2, [pc, #40]	; (800020c <GPIO_init+0x40>)
 80001e2:	f043 0310 	orr.w	r3, r3, #16
 80001e6:	6013      	str	r3, [r2, #0]
	// configure port A pin 13 as highZ input
	SET_BIT(GPIOA_CRH,0b0100,20);
 80001e8:	4b09      	ldr	r3, [pc, #36]	; (8000210 <GPIO_init+0x44>)
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	4a08      	ldr	r2, [pc, #32]	; (8000210 <GPIO_init+0x44>)
 80001ee:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80001f2:	6013      	str	r3, [r2, #0]
	// configure port B pin 13 as push pull output
	SET_BIT(GPIOB_CRH,0b0001,20);
 80001f4:	4b07      	ldr	r3, [pc, #28]	; (8000214 <GPIO_init+0x48>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	4a06      	ldr	r2, [pc, #24]	; (8000214 <GPIO_init+0x48>)
 80001fa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001fe:	6013      	str	r3, [r2, #0]
}
 8000200:	bf00      	nop
 8000202:	46bd      	mov	sp, r7
 8000204:	bc80      	pop	{r7}
 8000206:	4770      	bx	lr
 8000208:	40010800 	.word	0x40010800
 800020c:	40010c00 	.word	0x40010c00
 8000210:	40010804 	.word	0x40010804
 8000214:	40010c04 	.word	0x40010c04

08000218 <Clock_init>:

void Clock_init()
{
 8000218:	b480      	push	{r7}
 800021a:	af00      	add	r7, sp, #0
	// initialization for clock of GPIO portA to enable the module
	// Write 1 on bit 2
	SET_BIT(RCC_APB2ENR,1,2);
 800021c:	4b07      	ldr	r3, [pc, #28]	; (800023c <Clock_init+0x24>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a06      	ldr	r2, [pc, #24]	; (800023c <Clock_init+0x24>)
 8000222:	f043 0304 	orr.w	r3, r3, #4
 8000226:	6013      	str	r3, [r2, #0]
	// initialization for clock of GPIO portB to enable the module
	// Write 1 on bit 3
	SET_BIT(RCC_APB2ENR,1,3);
 8000228:	4b04      	ldr	r3, [pc, #16]	; (800023c <Clock_init+0x24>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a03      	ldr	r2, [pc, #12]	; (800023c <Clock_init+0x24>)
 800022e:	f043 0308 	orr.w	r3, r3, #8
 8000232:	6013      	str	r3, [r2, #0]
}
 8000234:	bf00      	nop
 8000236:	46bd      	mov	sp, r7
 8000238:	bc80      	pop	{r7}
 800023a:	4770      	bx	lr
 800023c:	40021018 	.word	0x40021018

08000240 <wait>:

void wait(int x)
{
 8000240:	b480      	push	{r7}
 8000242:	b085      	sub	sp, #20
 8000244:	af00      	add	r7, sp, #0
 8000246:	6078      	str	r0, [r7, #4]
	vuint32_t count1 , count2 ;
	for(count1 = 0 ; count1 < x ;count1++ )
 8000248:	2300      	movs	r3, #0
 800024a:	60fb      	str	r3, [r7, #12]
 800024c:	e00c      	b.n	8000268 <wait+0x28>
	{
		for(count2 = 0 ; count2 < 255 ; count2++)
 800024e:	2300      	movs	r3, #0
 8000250:	60bb      	str	r3, [r7, #8]
 8000252:	e003      	b.n	800025c <wait+0x1c>
		{
			asm("nop");
 8000254:	bf00      	nop
		for(count2 = 0 ; count2 < 255 ; count2++)
 8000256:	68bb      	ldr	r3, [r7, #8]
 8000258:	3301      	adds	r3, #1
 800025a:	60bb      	str	r3, [r7, #8]
 800025c:	68bb      	ldr	r3, [r7, #8]
 800025e:	2bfe      	cmp	r3, #254	; 0xfe
 8000260:	d9f8      	bls.n	8000254 <wait+0x14>
	for(count1 = 0 ; count1 < x ;count1++ )
 8000262:	68fb      	ldr	r3, [r7, #12]
 8000264:	3301      	adds	r3, #1
 8000266:	60fb      	str	r3, [r7, #12]
 8000268:	68fa      	ldr	r2, [r7, #12]
 800026a:	687b      	ldr	r3, [r7, #4]
 800026c:	429a      	cmp	r2, r3
 800026e:	d3ee      	bcc.n	800024e <wait+0xe>
		}
	}
}
 8000270:	bf00      	nop
 8000272:	3714      	adds	r7, #20
 8000274:	46bd      	mov	sp, r7
 8000276:	bc80      	pop	{r7}
 8000278:	4770      	bx	lr
	...

0800027c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800027c:	480d      	ldr	r0, [pc, #52]	; (80002b4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800027e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000280:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000284:	480c      	ldr	r0, [pc, #48]	; (80002b8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000286:	490d      	ldr	r1, [pc, #52]	; (80002bc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000288:	4a0d      	ldr	r2, [pc, #52]	; (80002c0 <LoopForever+0xe>)
  movs r3, #0
 800028a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800028c:	e002      	b.n	8000294 <LoopCopyDataInit>

0800028e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800028e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000292:	3304      	adds	r3, #4

08000294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000298:	d3f9      	bcc.n	800028e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800029a:	4a0a      	ldr	r2, [pc, #40]	; (80002c4 <LoopForever+0x12>)
  ldr r4, =_ebss
 800029c:	4c0a      	ldr	r4, [pc, #40]	; (80002c8 <LoopForever+0x16>)
  movs r3, #0
 800029e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002a0:	e001      	b.n	80002a6 <LoopFillZerobss>

080002a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002a4:	3204      	adds	r2, #4

080002a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002a8:	d3fb      	bcc.n	80002a2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002aa:	f000 f811 	bl	80002d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ae:	f7ff ff5f 	bl	8000170 <main>

080002b2 <LoopForever>:

LoopForever:
    b LoopForever
 80002b2:	e7fe      	b.n	80002b2 <LoopForever>
  ldr   r0, =_estack
 80002b4:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 80002b8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002bc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 80002c0:	08000338 	.word	0x08000338
  ldr r2, =_sbss
 80002c4:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 80002c8:	2000001c 	.word	0x2000001c

080002cc <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80002cc:	e7fe      	b.n	80002cc <ADC1_2_IRQHandler>
	...

080002d0 <__libc_init_array>:
 80002d0:	b570      	push	{r4, r5, r6, lr}
 80002d2:	2500      	movs	r5, #0
 80002d4:	4e0c      	ldr	r6, [pc, #48]	; (8000308 <__libc_init_array+0x38>)
 80002d6:	4c0d      	ldr	r4, [pc, #52]	; (800030c <__libc_init_array+0x3c>)
 80002d8:	1ba4      	subs	r4, r4, r6
 80002da:	10a4      	asrs	r4, r4, #2
 80002dc:	42a5      	cmp	r5, r4
 80002de:	d109      	bne.n	80002f4 <__libc_init_array+0x24>
 80002e0:	f000 f81a 	bl	8000318 <_init>
 80002e4:	2500      	movs	r5, #0
 80002e6:	4e0a      	ldr	r6, [pc, #40]	; (8000310 <__libc_init_array+0x40>)
 80002e8:	4c0a      	ldr	r4, [pc, #40]	; (8000314 <__libc_init_array+0x44>)
 80002ea:	1ba4      	subs	r4, r4, r6
 80002ec:	10a4      	asrs	r4, r4, #2
 80002ee:	42a5      	cmp	r5, r4
 80002f0:	d105      	bne.n	80002fe <__libc_init_array+0x2e>
 80002f2:	bd70      	pop	{r4, r5, r6, pc}
 80002f4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80002f8:	4798      	blx	r3
 80002fa:	3501      	adds	r5, #1
 80002fc:	e7ee      	b.n	80002dc <__libc_init_array+0xc>
 80002fe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000302:	4798      	blx	r3
 8000304:	3501      	adds	r5, #1
 8000306:	e7f2      	b.n	80002ee <__libc_init_array+0x1e>
 8000308:	08000330 	.word	0x08000330
 800030c:	08000330 	.word	0x08000330
 8000310:	08000330 	.word	0x08000330
 8000314:	08000334 	.word	0x08000334

08000318 <_init>:
 8000318:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800031a:	bf00      	nop
 800031c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800031e:	bc08      	pop	{r3}
 8000320:	469e      	mov	lr, r3
 8000322:	4770      	bx	lr

08000324 <_fini>:
 8000324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000326:	bf00      	nop
 8000328:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800032a:	bc08      	pop	{r3}
 800032c:	469e      	mov	lr, r3
 800032e:	4770      	bx	lr
