
Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000130  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000f58  08000130  08000130  00010130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08001088  08001088  00011088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080010b0  080010b0  000110b8  2**0
                  CONTENTS
  4 .ARM          00000000  080010b0  080010b0  000110b8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080010b0  080010b8  000110b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080010b0  080010b0  000110b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080010b4  080010b4  000110b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000110b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  20000000  080010b8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000006c  080010b8  0002006c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000110b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00003f2c  00000000  00000000  000110e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000009d9  00000000  00000000  0001500d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00000a62  00000000  00000000  000159e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_aranges 000001d0  00000000  00000000  00016448  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000178  00000000  00000000  00016618  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_macro  00002d72  00000000  00000000  00016790  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_line   000025ff  00000000  00000000  00019502  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .debug_str    0000a97f  00000000  00000000  0001bb01  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .comment      0000007b  00000000  00000000  00026480  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00000598  00000000  00000000  000264fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000130 <__do_global_dtors_aux>:
 8000130:	b510      	push	{r4, lr}
 8000132:	4c05      	ldr	r4, [pc, #20]	; (8000148 <__do_global_dtors_aux+0x18>)
 8000134:	7823      	ldrb	r3, [r4, #0]
 8000136:	b933      	cbnz	r3, 8000146 <__do_global_dtors_aux+0x16>
 8000138:	4b04      	ldr	r3, [pc, #16]	; (800014c <__do_global_dtors_aux+0x1c>)
 800013a:	b113      	cbz	r3, 8000142 <__do_global_dtors_aux+0x12>
 800013c:	4804      	ldr	r0, [pc, #16]	; (8000150 <__do_global_dtors_aux+0x20>)
 800013e:	f3af 8000 	nop.w
 8000142:	2301      	movs	r3, #1
 8000144:	7023      	strb	r3, [r4, #0]
 8000146:	bd10      	pop	{r4, pc}
 8000148:	20000000 	.word	0x20000000
 800014c:	00000000 	.word	0x00000000
 8000150:	08001070 	.word	0x08001070

08000154 <frame_dummy>:
 8000154:	b508      	push	{r3, lr}
 8000156:	4b03      	ldr	r3, [pc, #12]	; (8000164 <frame_dummy+0x10>)
 8000158:	b11b      	cbz	r3, 8000162 <frame_dummy+0xe>
 800015a:	4903      	ldr	r1, [pc, #12]	; (8000168 <frame_dummy+0x14>)
 800015c:	4803      	ldr	r0, [pc, #12]	; (800016c <frame_dummy+0x18>)
 800015e:	f3af 8000 	nop.w
 8000162:	bd08      	pop	{r3, pc}
 8000164:	00000000 	.word	0x00000000
 8000168:	20000004 	.word	0x20000004
 800016c:	08001070 	.word	0x08001070

08000170 <Enable_NVIC>:
/*=======================================================================================================================
                                                           Generic Functions
 *=======================================================================================================================
 */
void Enable_NVIC(uint16_t IRQ)
{
 8000170:	b480      	push	{r7}
 8000172:	b083      	sub	sp, #12
 8000174:	af00      	add	r7, sp, #0
 8000176:	4603      	mov	r3, r0
 8000178:	80fb      	strh	r3, [r7, #6]
	switch (IRQ) {
 800017a:	88fb      	ldrh	r3, [r7, #6]
 800017c:	2b0f      	cmp	r3, #15
 800017e:	d854      	bhi.n	800022a <Enable_NVIC+0xba>
 8000180:	a201      	add	r2, pc, #4	; (adr r2, 8000188 <Enable_NVIC+0x18>)
 8000182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000186:	bf00      	nop
 8000188:	080001c9 	.word	0x080001c9
 800018c:	080001d7 	.word	0x080001d7
 8000190:	080001e5 	.word	0x080001e5
 8000194:	080001f3 	.word	0x080001f3
 8000198:	08000201 	.word	0x08000201
 800019c:	0800020f 	.word	0x0800020f
 80001a0:	0800020f 	.word	0x0800020f
 80001a4:	0800020f 	.word	0x0800020f
 80001a8:	0800020f 	.word	0x0800020f
 80001ac:	0800020f 	.word	0x0800020f
 80001b0:	0800021d 	.word	0x0800021d
 80001b4:	0800021d 	.word	0x0800021d
 80001b8:	0800021d 	.word	0x0800021d
 80001bc:	0800021d 	.word	0x0800021d
 80001c0:	0800021d 	.word	0x0800021d
 80001c4:	0800021d 	.word	0x0800021d
		case 0: NVIC_IRQ6_EXTI0_Enable    ;break;
 80001c8:	4b1a      	ldr	r3, [pc, #104]	; (8000234 <Enable_NVIC+0xc4>)
 80001ca:	681b      	ldr	r3, [r3, #0]
 80001cc:	4a19      	ldr	r2, [pc, #100]	; (8000234 <Enable_NVIC+0xc4>)
 80001ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80001d2:	6013      	str	r3, [r2, #0]
 80001d4:	e029      	b.n	800022a <Enable_NVIC+0xba>
		case 1: NVIC_IRQ7_EXTI1_Enable    ;break;
 80001d6:	4b17      	ldr	r3, [pc, #92]	; (8000234 <Enable_NVIC+0xc4>)
 80001d8:	681b      	ldr	r3, [r3, #0]
 80001da:	4a16      	ldr	r2, [pc, #88]	; (8000234 <Enable_NVIC+0xc4>)
 80001dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80001e0:	6013      	str	r3, [r2, #0]
 80001e2:	e022      	b.n	800022a <Enable_NVIC+0xba>
		case 2: NVIC_IRQ8_EXTI2_Enable    ;break;
 80001e4:	4b13      	ldr	r3, [pc, #76]	; (8000234 <Enable_NVIC+0xc4>)
 80001e6:	681b      	ldr	r3, [r3, #0]
 80001e8:	4a12      	ldr	r2, [pc, #72]	; (8000234 <Enable_NVIC+0xc4>)
 80001ea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80001ee:	6013      	str	r3, [r2, #0]
 80001f0:	e01b      	b.n	800022a <Enable_NVIC+0xba>
		case 3: NVIC_IRQ9_EXTI3_Enable    ;break;
 80001f2:	4b10      	ldr	r3, [pc, #64]	; (8000234 <Enable_NVIC+0xc4>)
 80001f4:	681b      	ldr	r3, [r3, #0]
 80001f6:	4a0f      	ldr	r2, [pc, #60]	; (8000234 <Enable_NVIC+0xc4>)
 80001f8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80001fc:	6013      	str	r3, [r2, #0]
 80001fe:	e014      	b.n	800022a <Enable_NVIC+0xba>
		case 4: NVIC_IRQ10_EXTI4_Enable   ;break;
 8000200:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <Enable_NVIC+0xc4>)
 8000202:	681b      	ldr	r3, [r3, #0]
 8000204:	4a0b      	ldr	r2, [pc, #44]	; (8000234 <Enable_NVIC+0xc4>)
 8000206:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800020a:	6013      	str	r3, [r2, #0]
 800020c:	e00d      	b.n	800022a <Enable_NVIC+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:NVIC_IRQ23_EXTI5_9_Enable ;break;
 800020e:	4b09      	ldr	r3, [pc, #36]	; (8000234 <Enable_NVIC+0xc4>)
 8000210:	681b      	ldr	r3, [r3, #0]
 8000212:	4a08      	ldr	r2, [pc, #32]	; (8000234 <Enable_NVIC+0xc4>)
 8000214:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000218:	6013      	str	r3, [r2, #0]
 800021a:	e006      	b.n	800022a <Enable_NVIC+0xba>
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:NVIC_IRQ40_EXTI10_15_Enable;break;
 800021c:	4b06      	ldr	r3, [pc, #24]	; (8000238 <Enable_NVIC+0xc8>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a05      	ldr	r2, [pc, #20]	; (8000238 <Enable_NVIC+0xc8>)
 8000222:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000226:	6013      	str	r3, [r2, #0]
 8000228:	bf00      	nop

	}
}
 800022a:	bf00      	nop
 800022c:	370c      	adds	r7, #12
 800022e:	46bd      	mov	sp, r7
 8000230:	bc80      	pop	{r7}
 8000232:	4770      	bx	lr
 8000234:	e000e100 	.word	0xe000e100
 8000238:	e000e104 	.word	0xe000e104

0800023c <Disable_NVIC>:
void Disable_NVIC(uint16_t IRQ)
{
 800023c:	b480      	push	{r7}
 800023e:	b083      	sub	sp, #12
 8000240:	af00      	add	r7, sp, #0
 8000242:	4603      	mov	r3, r0
 8000244:	80fb      	strh	r3, [r7, #6]
	switch (IRQ) {
 8000246:	88fb      	ldrh	r3, [r7, #6]
 8000248:	2b0f      	cmp	r3, #15
 800024a:	d854      	bhi.n	80002f6 <Disable_NVIC+0xba>
 800024c:	a201      	add	r2, pc, #4	; (adr r2, 8000254 <Disable_NVIC+0x18>)
 800024e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000252:	bf00      	nop
 8000254:	08000295 	.word	0x08000295
 8000258:	080002a3 	.word	0x080002a3
 800025c:	080002b1 	.word	0x080002b1
 8000260:	080002bf 	.word	0x080002bf
 8000264:	080002cd 	.word	0x080002cd
 8000268:	080002db 	.word	0x080002db
 800026c:	080002db 	.word	0x080002db
 8000270:	080002db 	.word	0x080002db
 8000274:	080002db 	.word	0x080002db
 8000278:	080002db 	.word	0x080002db
 800027c:	080002e9 	.word	0x080002e9
 8000280:	080002e9 	.word	0x080002e9
 8000284:	080002e9 	.word	0x080002e9
 8000288:	080002e9 	.word	0x080002e9
 800028c:	080002e9 	.word	0x080002e9
 8000290:	080002e9 	.word	0x080002e9
		case 0: NVIC_IRQ6_EXTI0_Disable    ;break;
 8000294:	4b1a      	ldr	r3, [pc, #104]	; (8000300 <Disable_NVIC+0xc4>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a19      	ldr	r2, [pc, #100]	; (8000300 <Disable_NVIC+0xc4>)
 800029a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800029e:	6013      	str	r3, [r2, #0]
 80002a0:	e029      	b.n	80002f6 <Disable_NVIC+0xba>
		case 1: NVIC_IRQ7_EXTI1_Disable    ;break;
 80002a2:	4b17      	ldr	r3, [pc, #92]	; (8000300 <Disable_NVIC+0xc4>)
 80002a4:	681b      	ldr	r3, [r3, #0]
 80002a6:	4a16      	ldr	r2, [pc, #88]	; (8000300 <Disable_NVIC+0xc4>)
 80002a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ac:	6013      	str	r3, [r2, #0]
 80002ae:	e022      	b.n	80002f6 <Disable_NVIC+0xba>
		case 2: NVIC_IRQ8_EXTI2_Disable    ;break;
 80002b0:	4b13      	ldr	r3, [pc, #76]	; (8000300 <Disable_NVIC+0xc4>)
 80002b2:	681b      	ldr	r3, [r3, #0]
 80002b4:	4a12      	ldr	r2, [pc, #72]	; (8000300 <Disable_NVIC+0xc4>)
 80002b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ba:	6013      	str	r3, [r2, #0]
 80002bc:	e01b      	b.n	80002f6 <Disable_NVIC+0xba>
		case 3: NVIC_IRQ9_EXTI3_Disable    ;break;
 80002be:	4b10      	ldr	r3, [pc, #64]	; (8000300 <Disable_NVIC+0xc4>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	4a0f      	ldr	r2, [pc, #60]	; (8000300 <Disable_NVIC+0xc4>)
 80002c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002c8:	6013      	str	r3, [r2, #0]
 80002ca:	e014      	b.n	80002f6 <Disable_NVIC+0xba>
		case 4: NVIC_IRQ10_EXTI4_Disable   ;break;
 80002cc:	4b0c      	ldr	r3, [pc, #48]	; (8000300 <Disable_NVIC+0xc4>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a0b      	ldr	r2, [pc, #44]	; (8000300 <Disable_NVIC+0xc4>)
 80002d2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002d6:	6013      	str	r3, [r2, #0]
 80002d8:	e00d      	b.n	80002f6 <Disable_NVIC+0xba>
		case 5:
		case 6:
		case 7:
		case 8:
		case 9:NVIC_IRQ23_EXTI5_9_Disable ;break;
 80002da:	4b09      	ldr	r3, [pc, #36]	; (8000300 <Disable_NVIC+0xc4>)
 80002dc:	681b      	ldr	r3, [r3, #0]
 80002de:	4a08      	ldr	r2, [pc, #32]	; (8000300 <Disable_NVIC+0xc4>)
 80002e0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80002e4:	6013      	str	r3, [r2, #0]
 80002e6:	e006      	b.n	80002f6 <Disable_NVIC+0xba>
		case 10:
		case 11:
		case 12:
		case 13:
		case 14:
		case 15:NVIC_IRQ40_EXTI10_15_Disable;break;
 80002e8:	4b06      	ldr	r3, [pc, #24]	; (8000304 <Disable_NVIC+0xc8>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	4a05      	ldr	r2, [pc, #20]	; (8000304 <Disable_NVIC+0xc8>)
 80002ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002f2:	6013      	str	r3, [r2, #0]
 80002f4:	bf00      	nop

	}
}
 80002f6:	bf00      	nop
 80002f8:	370c      	adds	r7, #12
 80002fa:	46bd      	mov	sp, r7
 80002fc:	bc80      	pop	{r7}
 80002fe:	4770      	bx	lr
 8000300:	e000e180 	.word	0xe000e180
 8000304:	e000e184 	.word	0xe000e184

08000308 <Update_EXTI>:
 * Note           - STM32F103C6 MCU has a GPIO A/B/C/D/E modules but LQFP48 Package has only A/B and part of C/D
 *                - Also Mandatory to Enable RCC Clock for AFIO and the corresponding GPIO
 *                - It is a local function that no one can call it outside
===========================================================================================================================*/
void Update_EXTI(EXTI_PinConfig_t *EXTI_Config)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	b084      	sub	sp, #16
 800030c:	af00      	add	r7, sp, #0
 800030e:	6078      	str	r0, [r7, #4]
	// 1- Configure the GPIO Pin to be an AF input ---> FLO input
	PinCFG.GPIO_PinNumber = EXTI_Config->EXTI_PIN.GPIO_PinNumber;
 8000310:	687b      	ldr	r3, [r7, #4]
 8000312:	891a      	ldrh	r2, [r3, #8]
 8000314:	4b6b      	ldr	r3, [pc, #428]	; (80004c4 <Update_EXTI+0x1bc>)
 8000316:	801a      	strh	r2, [r3, #0]
	PinCFG.GPIO_MODE = GPIO_MODE_AF_Input;
 8000318:	4b6a      	ldr	r3, [pc, #424]	; (80004c4 <Update_EXTI+0x1bc>)
 800031a:	2208      	movs	r2, #8
 800031c:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(EXTI_Config->EXTI_PIN.GPIO_Port, &PinCFG);
 800031e:	687b      	ldr	r3, [r7, #4]
 8000320:	685b      	ldr	r3, [r3, #4]
 8000322:	4968      	ldr	r1, [pc, #416]	; (80004c4 <Update_EXTI+0x1bc>)
 8000324:	4618      	mov	r0, r3
 8000326:	f000 fa5c 	bl	80007e2 <MCAL_GPIO_Init>
	/*===============================================================*/
	//2- Up-date AFIO to route with the EXTI line and the port A/B/C/D
	// we will divide the input line number by four to get the register
	uint8_t AFIO_EXTICR_Index = EXTI_Config->EXTI_PIN.EXTI_InputLine /4 ;
 800032a:	687b      	ldr	r3, [r7, #4]
 800032c:	881b      	ldrh	r3, [r3, #0]
 800032e:	089b      	lsrs	r3, r3, #2
 8000330:	b29b      	uxth	r3, r3
 8000332:	73fb      	strb	r3, [r7, #15]
	// get the modules of the input line over four and multiplay it by 4 to get the positon of the interrupt
	uint8_t AFIO_EXTICR_Position = (EXTI_Config->EXTI_PIN.EXTI_InputLine % 4)*4 ;
 8000334:	687b      	ldr	r3, [r7, #4]
 8000336:	881b      	ldrh	r3, [r3, #0]
 8000338:	b2db      	uxtb	r3, r3
 800033a:	f003 0303 	and.w	r3, r3, #3
 800033e:	b2db      	uxtb	r3, r3
 8000340:	009b      	lsls	r3, r3, #2
 8000342:	73bb      	strb	r3, [r7, #14]
	// Clear the bits of the interrupt
	AFIO->AFIO_EXTICR[AFIO_EXTICR_Index] &= ~(0xF << AFIO_EXTICR_Position);
 8000344:	4a60      	ldr	r2, [pc, #384]	; (80004c8 <Update_EXTI+0x1c0>)
 8000346:	7bfb      	ldrb	r3, [r7, #15]
 8000348:	3302      	adds	r3, #2
 800034a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800034e:	7bbb      	ldrb	r3, [r7, #14]
 8000350:	210f      	movs	r1, #15
 8000352:	fa01 f303 	lsl.w	r3, r1, r3
 8000356:	43db      	mvns	r3, r3
 8000358:	4618      	mov	r0, r3
 800035a:	495b      	ldr	r1, [pc, #364]	; (80004c8 <Update_EXTI+0x1c0>)
 800035c:	7bfb      	ldrb	r3, [r7, #15]
 800035e:	4002      	ands	r2, r0
 8000360:	3302      	adds	r3, #2
 8000362:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	// write the value on the register
	AFIO->AFIO_EXTICR[AFIO_EXTICR_Index] |=((AFIO_GPIO_EXTI_Mapping(EXTI_Config->EXTI_PIN.GPIO_Port) & 0xF) << AFIO_EXTICR_Position);
 8000366:	4a58      	ldr	r2, [pc, #352]	; (80004c8 <Update_EXTI+0x1c0>)
 8000368:	7bfb      	ldrb	r3, [r7, #15]
 800036a:	3302      	adds	r3, #2
 800036c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	685b      	ldr	r3, [r3, #4]
 8000374:	4955      	ldr	r1, [pc, #340]	; (80004cc <Update_EXTI+0x1c4>)
 8000376:	428b      	cmp	r3, r1
 8000378:	d016      	beq.n	80003a8 <Update_EXTI+0xa0>
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	685b      	ldr	r3, [r3, #4]
 800037e:	4954      	ldr	r1, [pc, #336]	; (80004d0 <Update_EXTI+0x1c8>)
 8000380:	428b      	cmp	r3, r1
 8000382:	d00f      	beq.n	80003a4 <Update_EXTI+0x9c>
 8000384:	687b      	ldr	r3, [r7, #4]
 8000386:	685b      	ldr	r3, [r3, #4]
 8000388:	4952      	ldr	r1, [pc, #328]	; (80004d4 <Update_EXTI+0x1cc>)
 800038a:	428b      	cmp	r3, r1
 800038c:	d008      	beq.n	80003a0 <Update_EXTI+0x98>
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	685b      	ldr	r3, [r3, #4]
 8000392:	4951      	ldr	r1, [pc, #324]	; (80004d8 <Update_EXTI+0x1d0>)
 8000394:	428b      	cmp	r3, r1
 8000396:	d101      	bne.n	800039c <Update_EXTI+0x94>
 8000398:	2303      	movs	r3, #3
 800039a:	e006      	b.n	80003aa <Update_EXTI+0xa2>
 800039c:	2300      	movs	r3, #0
 800039e:	e004      	b.n	80003aa <Update_EXTI+0xa2>
 80003a0:	2302      	movs	r3, #2
 80003a2:	e002      	b.n	80003aa <Update_EXTI+0xa2>
 80003a4:	2301      	movs	r3, #1
 80003a6:	e000      	b.n	80003aa <Update_EXTI+0xa2>
 80003a8:	2300      	movs	r3, #0
 80003aa:	7bb9      	ldrb	r1, [r7, #14]
 80003ac:	408b      	lsls	r3, r1
 80003ae:	4618      	mov	r0, r3
 80003b0:	4945      	ldr	r1, [pc, #276]	; (80004c8 <Update_EXTI+0x1c0>)
 80003b2:	7bfb      	ldrb	r3, [r7, #15]
 80003b4:	4302      	orrs	r2, r0
 80003b6:	3302      	adds	r3, #2
 80003b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	/*===============================================================*/
	//3- Up-date the rising and falling edge registers
	// clear the input line corresponding to our interrupt
	EXTI->EXTI_RTSR &= ~(1 <<(EXTI_Config->EXTI_PIN.EXTI_InputLine)); // in case of Raising triggering
 80003bc:	4b47      	ldr	r3, [pc, #284]	; (80004dc <Update_EXTI+0x1d4>)
 80003be:	689b      	ldr	r3, [r3, #8]
 80003c0:	687a      	ldr	r2, [r7, #4]
 80003c2:	8812      	ldrh	r2, [r2, #0]
 80003c4:	4611      	mov	r1, r2
 80003c6:	2201      	movs	r2, #1
 80003c8:	408a      	lsls	r2, r1
 80003ca:	43d2      	mvns	r2, r2
 80003cc:	4611      	mov	r1, r2
 80003ce:	4a43      	ldr	r2, [pc, #268]	; (80004dc <Update_EXTI+0x1d4>)
 80003d0:	400b      	ands	r3, r1
 80003d2:	6093      	str	r3, [r2, #8]
	EXTI->EXTI_FTSR &= ~(1 <<(EXTI_Config->EXTI_PIN.EXTI_InputLine)); // in case of Falling triggering
 80003d4:	4b41      	ldr	r3, [pc, #260]	; (80004dc <Update_EXTI+0x1d4>)
 80003d6:	68db      	ldr	r3, [r3, #12]
 80003d8:	687a      	ldr	r2, [r7, #4]
 80003da:	8812      	ldrh	r2, [r2, #0]
 80003dc:	4611      	mov	r1, r2
 80003de:	2201      	movs	r2, #1
 80003e0:	408a      	lsls	r2, r1
 80003e2:	43d2      	mvns	r2, r2
 80003e4:	4611      	mov	r1, r2
 80003e6:	4a3d      	ldr	r2, [pc, #244]	; (80004dc <Update_EXTI+0x1d4>)
 80003e8:	400b      	ands	r3, r1
 80003ea:	60d3      	str	r3, [r2, #12]
	// check the case of triggering and activate the register
	if(EXTI_Config->Triaggering_Case == EXTI_Triggering_RISING)
 80003ec:	687b      	ldr	r3, [r7, #4]
 80003ee:	899b      	ldrh	r3, [r3, #12]
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d10b      	bne.n	800040c <Update_EXTI+0x104>
	{
		EXTI->EXTI_RTSR |= (1 <<(EXTI_Config->EXTI_PIN.EXTI_InputLine));
 80003f4:	4b39      	ldr	r3, [pc, #228]	; (80004dc <Update_EXTI+0x1d4>)
 80003f6:	689b      	ldr	r3, [r3, #8]
 80003f8:	687a      	ldr	r2, [r7, #4]
 80003fa:	8812      	ldrh	r2, [r2, #0]
 80003fc:	4611      	mov	r1, r2
 80003fe:	2201      	movs	r2, #1
 8000400:	408a      	lsls	r2, r1
 8000402:	4611      	mov	r1, r2
 8000404:	4a35      	ldr	r2, [pc, #212]	; (80004dc <Update_EXTI+0x1d4>)
 8000406:	430b      	orrs	r3, r1
 8000408:	6093      	str	r3, [r2, #8]
 800040a:	e029      	b.n	8000460 <Update_EXTI+0x158>

	}else if(EXTI_Config->Triaggering_Case == EXTI_Triggering_FALLING)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	899b      	ldrh	r3, [r3, #12]
 8000410:	2b01      	cmp	r3, #1
 8000412:	d10b      	bne.n	800042c <Update_EXTI+0x124>
	{
		EXTI->EXTI_FTSR |= (1 <<(EXTI_Config->EXTI_PIN.EXTI_InputLine));
 8000414:	4b31      	ldr	r3, [pc, #196]	; (80004dc <Update_EXTI+0x1d4>)
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	687a      	ldr	r2, [r7, #4]
 800041a:	8812      	ldrh	r2, [r2, #0]
 800041c:	4611      	mov	r1, r2
 800041e:	2201      	movs	r2, #1
 8000420:	408a      	lsls	r2, r1
 8000422:	4611      	mov	r1, r2
 8000424:	4a2d      	ldr	r2, [pc, #180]	; (80004dc <Update_EXTI+0x1d4>)
 8000426:	430b      	orrs	r3, r1
 8000428:	60d3      	str	r3, [r2, #12]
 800042a:	e019      	b.n	8000460 <Update_EXTI+0x158>

	}else if(EXTI_Config->Triaggering_Case == EXTI_Triggering_RISING_AND_FALLING)
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	899b      	ldrh	r3, [r3, #12]
 8000430:	2b02      	cmp	r3, #2
 8000432:	d115      	bne.n	8000460 <Update_EXTI+0x158>
	{
		EXTI->EXTI_RTSR |= (1 <<(EXTI_Config->EXTI_PIN.EXTI_InputLine));
 8000434:	4b29      	ldr	r3, [pc, #164]	; (80004dc <Update_EXTI+0x1d4>)
 8000436:	689b      	ldr	r3, [r3, #8]
 8000438:	687a      	ldr	r2, [r7, #4]
 800043a:	8812      	ldrh	r2, [r2, #0]
 800043c:	4611      	mov	r1, r2
 800043e:	2201      	movs	r2, #1
 8000440:	408a      	lsls	r2, r1
 8000442:	4611      	mov	r1, r2
 8000444:	4a25      	ldr	r2, [pc, #148]	; (80004dc <Update_EXTI+0x1d4>)
 8000446:	430b      	orrs	r3, r1
 8000448:	6093      	str	r3, [r2, #8]
		EXTI->EXTI_FTSR |= (1 <<(EXTI_Config->EXTI_PIN.EXTI_InputLine));
 800044a:	4b24      	ldr	r3, [pc, #144]	; (80004dc <Update_EXTI+0x1d4>)
 800044c:	68db      	ldr	r3, [r3, #12]
 800044e:	687a      	ldr	r2, [r7, #4]
 8000450:	8812      	ldrh	r2, [r2, #0]
 8000452:	4611      	mov	r1, r2
 8000454:	2201      	movs	r2, #1
 8000456:	408a      	lsls	r2, r1
 8000458:	4611      	mov	r1, r2
 800045a:	4a20      	ldr	r2, [pc, #128]	; (80004dc <Update_EXTI+0x1d4>)
 800045c:	430b      	orrs	r3, r1
 800045e:	60d3      	str	r3, [r2, #12]
	}

	/*===============================================================*/
	//4- Update the IRQ CallBack Function
	GP_IRQ_CallBack[EXTI_Config->EXTI_PIN.EXTI_InputLine] = EXTI_Config->P_IRQ_CallBack;
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	881b      	ldrh	r3, [r3, #0]
 8000464:	4619      	mov	r1, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	691b      	ldr	r3, [r3, #16]
 800046a:	4a1d      	ldr	r2, [pc, #116]	; (80004e0 <Update_EXTI+0x1d8>)
 800046c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]

	/*===============================================================*/
	//4-Enable / Disable IRQ EXTI & NVIC
	if(EXTI_Config->IRQ_EN == EXTI_IRQ_ENABLE)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	89db      	ldrh	r3, [r3, #14]
 8000474:	2b01      	cmp	r3, #1
 8000476:	d110      	bne.n	800049a <Update_EXTI+0x192>
	{
		// Set the IMR Resigter to clear the mask
		EXTI->EXTI_IMR |= (1 << EXTI_Config->EXTI_PIN.EXTI_InputLine);
 8000478:	4b18      	ldr	r3, [pc, #96]	; (80004dc <Update_EXTI+0x1d4>)
 800047a:	681b      	ldr	r3, [r3, #0]
 800047c:	687a      	ldr	r2, [r7, #4]
 800047e:	8812      	ldrh	r2, [r2, #0]
 8000480:	4611      	mov	r1, r2
 8000482:	2201      	movs	r2, #1
 8000484:	408a      	lsls	r2, r1
 8000486:	4611      	mov	r1, r2
 8000488:	4a14      	ldr	r2, [pc, #80]	; (80004dc <Update_EXTI+0x1d4>)
 800048a:	430b      	orrs	r3, r1
 800048c:	6013      	str	r3, [r2, #0]
		// Enable the NVIc
		Enable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLine);
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	881b      	ldrh	r3, [r3, #0]
 8000492:	4618      	mov	r0, r3
 8000494:	f7ff fe6c 	bl	8000170 <Enable_NVIC>
		// Reset the IMR Resigter to set the mask
		EXTI->EXTI_IMR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLine);
		// Disable the NVIc
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLine);
	}
}
 8000498:	e010      	b.n	80004bc <Update_EXTI+0x1b4>
		EXTI->EXTI_IMR &= ~(1 << EXTI_Config->EXTI_PIN.EXTI_InputLine);
 800049a:	4b10      	ldr	r3, [pc, #64]	; (80004dc <Update_EXTI+0x1d4>)
 800049c:	681b      	ldr	r3, [r3, #0]
 800049e:	687a      	ldr	r2, [r7, #4]
 80004a0:	8812      	ldrh	r2, [r2, #0]
 80004a2:	4611      	mov	r1, r2
 80004a4:	2201      	movs	r2, #1
 80004a6:	408a      	lsls	r2, r1
 80004a8:	43d2      	mvns	r2, r2
 80004aa:	4611      	mov	r1, r2
 80004ac:	4a0b      	ldr	r2, [pc, #44]	; (80004dc <Update_EXTI+0x1d4>)
 80004ae:	400b      	ands	r3, r1
 80004b0:	6013      	str	r3, [r2, #0]
		Disable_NVIC(EXTI_Config->EXTI_PIN.EXTI_InputLine);
 80004b2:	687b      	ldr	r3, [r7, #4]
 80004b4:	881b      	ldrh	r3, [r3, #0]
 80004b6:	4618      	mov	r0, r3
 80004b8:	f7ff fec0 	bl	800023c <Disable_NVIC>
}
 80004bc:	bf00      	nop
 80004be:	3710      	adds	r7, #16
 80004c0:	46bd      	mov	sp, r7
 80004c2:	bd80      	pop	{r7, pc}
 80004c4:	20000020 	.word	0x20000020
 80004c8:	40010000 	.word	0x40010000
 80004cc:	40010800 	.word	0x40010800
 80004d0:	40010c00 	.word	0x40010c00
 80004d4:	40011000 	.word	0x40011000
 80004d8:	40011400 	.word	0x40011400
 80004dc:	40010400 	.word	0x40010400
 80004e0:	20000024 	.word	0x20000024

080004e4 <MCAL_EXTI_GPIO_Init>:
 * @retval        - none
 * Note           - STM32F103C6 MCU has a GPIO A/B/C/D/E modules but LQFP48 Package has only A/B and part of C/D
 *                - Also Mandatory to Enable RCC Clock for AFIO and the corresponding GPIO
===========================================================================================================================*/
void MCAL_EXTI_GPIO_Init(EXTI_PinConfig_t *EXTI_Config)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
	// we will call the Update_EXTI() Function to set the configration to the interrupt
	Update_EXTI(EXTI_Config);
 80004ec:	6878      	ldr	r0, [r7, #4]
 80004ee:	f7ff ff0b 	bl	8000308 <Update_EXTI>
}
 80004f2:	bf00      	nop
 80004f4:	3708      	adds	r7, #8
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
	...

080004fc <EXTI0_IRQHandler>:
/*===========================================================================================================================
                                                      ISR Functions
 *==========================================================================================================================*/

void EXTI0_IRQHandler(void)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	af00      	add	r7, sp, #0
	// we clear the bit corresponding to the interrupt in the Pending resgister by writting '1'
	EXTI->EXTI_PR |= (1 << 0) ;
 8000500:	4b05      	ldr	r3, [pc, #20]	; (8000518 <EXTI0_IRQHandler+0x1c>)
 8000502:	695b      	ldr	r3, [r3, #20]
 8000504:	4a04      	ldr	r2, [pc, #16]	; (8000518 <EXTI0_IRQHandler+0x1c>)
 8000506:	f043 0301 	orr.w	r3, r3, #1
 800050a:	6153      	str	r3, [r2, #20]
	// Calling the CallBack Function
	GP_IRQ_CallBack[0]();
 800050c:	4b03      	ldr	r3, [pc, #12]	; (800051c <EXTI0_IRQHandler+0x20>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4798      	blx	r3

}
 8000512:	bf00      	nop
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40010400 	.word	0x40010400
 800051c:	20000024 	.word	0x20000024

08000520 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1 << 1) ;
 8000524:	4b05      	ldr	r3, [pc, #20]	; (800053c <EXTI1_IRQHandler+0x1c>)
 8000526:	695b      	ldr	r3, [r3, #20]
 8000528:	4a04      	ldr	r2, [pc, #16]	; (800053c <EXTI1_IRQHandler+0x1c>)
 800052a:	f043 0302 	orr.w	r3, r3, #2
 800052e:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[1]();
 8000530:	4b03      	ldr	r3, [pc, #12]	; (8000540 <EXTI1_IRQHandler+0x20>)
 8000532:	685b      	ldr	r3, [r3, #4]
 8000534:	4798      	blx	r3


}
 8000536:	bf00      	nop
 8000538:	bd80      	pop	{r7, pc}
 800053a:	bf00      	nop
 800053c:	40010400 	.word	0x40010400
 8000540:	20000024 	.word	0x20000024

08000544 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1 << 2) ;
 8000548:	4b05      	ldr	r3, [pc, #20]	; (8000560 <EXTI2_IRQHandler+0x1c>)
 800054a:	695b      	ldr	r3, [r3, #20]
 800054c:	4a04      	ldr	r2, [pc, #16]	; (8000560 <EXTI2_IRQHandler+0x1c>)
 800054e:	f043 0304 	orr.w	r3, r3, #4
 8000552:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[2]();
 8000554:	4b03      	ldr	r3, [pc, #12]	; (8000564 <EXTI2_IRQHandler+0x20>)
 8000556:	689b      	ldr	r3, [r3, #8]
 8000558:	4798      	blx	r3

}
 800055a:	bf00      	nop
 800055c:	bd80      	pop	{r7, pc}
 800055e:	bf00      	nop
 8000560:	40010400 	.word	0x40010400
 8000564:	20000024 	.word	0x20000024

08000568 <EXTI3_IRQHandler>:

void EXTI3_IRQHandler(void)
{
 8000568:	b580      	push	{r7, lr}
 800056a:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1 << 3) ;
 800056c:	4b05      	ldr	r3, [pc, #20]	; (8000584 <EXTI3_IRQHandler+0x1c>)
 800056e:	695b      	ldr	r3, [r3, #20]
 8000570:	4a04      	ldr	r2, [pc, #16]	; (8000584 <EXTI3_IRQHandler+0x1c>)
 8000572:	f043 0308 	orr.w	r3, r3, #8
 8000576:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[3]();
 8000578:	4b03      	ldr	r3, [pc, #12]	; (8000588 <EXTI3_IRQHandler+0x20>)
 800057a:	68db      	ldr	r3, [r3, #12]
 800057c:	4798      	blx	r3

}
 800057e:	bf00      	nop
 8000580:	bd80      	pop	{r7, pc}
 8000582:	bf00      	nop
 8000584:	40010400 	.word	0x40010400
 8000588:	20000024 	.word	0x20000024

0800058c <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
	EXTI->EXTI_PR |= (1 << 4) ;
 8000590:	4b05      	ldr	r3, [pc, #20]	; (80005a8 <EXTI4_IRQHandler+0x1c>)
 8000592:	695b      	ldr	r3, [r3, #20]
 8000594:	4a04      	ldr	r2, [pc, #16]	; (80005a8 <EXTI4_IRQHandler+0x1c>)
 8000596:	f043 0310 	orr.w	r3, r3, #16
 800059a:	6153      	str	r3, [r2, #20]
	GP_IRQ_CallBack[4]();
 800059c:	4b03      	ldr	r3, [pc, #12]	; (80005ac <EXTI4_IRQHandler+0x20>)
 800059e:	691b      	ldr	r3, [r3, #16]
 80005a0:	4798      	blx	r3

}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	40010400 	.word	0x40010400
 80005ac:	20000024 	.word	0x20000024

080005b0 <EXTI9_5_IRQHandler>:
void EXTI9_5_IRQHandler(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	if((EXTI->EXTI_PR )& (1<<5)){EXTI->EXTI_PR |= (1 << 5) ;	GP_IRQ_CallBack[5]();}
 80005b4:	4b26      	ldr	r3, [pc, #152]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 80005b6:	695b      	ldr	r3, [r3, #20]
 80005b8:	f003 0320 	and.w	r3, r3, #32
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d008      	beq.n	80005d2 <EXTI9_5_IRQHandler+0x22>
 80005c0:	4b23      	ldr	r3, [pc, #140]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 80005c2:	695b      	ldr	r3, [r3, #20]
 80005c4:	4a22      	ldr	r2, [pc, #136]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 80005c6:	f043 0320 	orr.w	r3, r3, #32
 80005ca:	6153      	str	r3, [r2, #20]
 80005cc:	4b21      	ldr	r3, [pc, #132]	; (8000654 <EXTI9_5_IRQHandler+0xa4>)
 80005ce:	695b      	ldr	r3, [r3, #20]
 80005d0:	4798      	blx	r3
	if((EXTI->EXTI_PR )& (1<<6)){EXTI->EXTI_PR |= (1 << 6) ;	GP_IRQ_CallBack[6]();}
 80005d2:	4b1f      	ldr	r3, [pc, #124]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 80005d4:	695b      	ldr	r3, [r3, #20]
 80005d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d008      	beq.n	80005f0 <EXTI9_5_IRQHandler+0x40>
 80005de:	4b1c      	ldr	r3, [pc, #112]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	4a1b      	ldr	r2, [pc, #108]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 80005e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005e8:	6153      	str	r3, [r2, #20]
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <EXTI9_5_IRQHandler+0xa4>)
 80005ec:	699b      	ldr	r3, [r3, #24]
 80005ee:	4798      	blx	r3
	if((EXTI->EXTI_PR )& (1<<7)){EXTI->EXTI_PR |= (1 << 7) ;	GP_IRQ_CallBack[7]();}
 80005f0:	4b17      	ldr	r3, [pc, #92]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 80005f2:	695b      	ldr	r3, [r3, #20]
 80005f4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d008      	beq.n	800060e <EXTI9_5_IRQHandler+0x5e>
 80005fc:	4b14      	ldr	r3, [pc, #80]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 80005fe:	695b      	ldr	r3, [r3, #20]
 8000600:	4a13      	ldr	r2, [pc, #76]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 8000602:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000606:	6153      	str	r3, [r2, #20]
 8000608:	4b12      	ldr	r3, [pc, #72]	; (8000654 <EXTI9_5_IRQHandler+0xa4>)
 800060a:	69db      	ldr	r3, [r3, #28]
 800060c:	4798      	blx	r3
	if((EXTI->EXTI_PR )& (1<<8)){EXTI->EXTI_PR |= (1 << 8) ;	GP_IRQ_CallBack[8]();}
 800060e:	4b10      	ldr	r3, [pc, #64]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 8000610:	695b      	ldr	r3, [r3, #20]
 8000612:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000616:	2b00      	cmp	r3, #0
 8000618:	d008      	beq.n	800062c <EXTI9_5_IRQHandler+0x7c>
 800061a:	4b0d      	ldr	r3, [pc, #52]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 800061c:	695b      	ldr	r3, [r3, #20]
 800061e:	4a0c      	ldr	r2, [pc, #48]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 8000620:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000624:	6153      	str	r3, [r2, #20]
 8000626:	4b0b      	ldr	r3, [pc, #44]	; (8000654 <EXTI9_5_IRQHandler+0xa4>)
 8000628:	6a1b      	ldr	r3, [r3, #32]
 800062a:	4798      	blx	r3
	if((EXTI->EXTI_PR )& (1<<9)){EXTI->EXTI_PR |= (1 << 9) ;	GP_IRQ_CallBack[9]();}
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 800062e:	695b      	ldr	r3, [r3, #20]
 8000630:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000634:	2b00      	cmp	r3, #0
 8000636:	d008      	beq.n	800064a <EXTI9_5_IRQHandler+0x9a>
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 800063a:	695b      	ldr	r3, [r3, #20]
 800063c:	4a04      	ldr	r2, [pc, #16]	; (8000650 <EXTI9_5_IRQHandler+0xa0>)
 800063e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000642:	6153      	str	r3, [r2, #20]
 8000644:	4b03      	ldr	r3, [pc, #12]	; (8000654 <EXTI9_5_IRQHandler+0xa4>)
 8000646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000648:	4798      	blx	r3



}
 800064a:	bf00      	nop
 800064c:	bd80      	pop	{r7, pc}
 800064e:	bf00      	nop
 8000650:	40010400 	.word	0x40010400
 8000654:	20000024 	.word	0x20000024

08000658 <EXTI15_10_IRQHandler>:
void EXTI15_10_IRQHandler(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
	if((EXTI->EXTI_PR )& (1<<10)){EXTI->EXTI_PR |= (1 << 10) ;	GP_IRQ_CallBack[10]();}
 800065c:	4b2d      	ldr	r3, [pc, #180]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 800065e:	695b      	ldr	r3, [r3, #20]
 8000660:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000664:	2b00      	cmp	r3, #0
 8000666:	d008      	beq.n	800067a <EXTI15_10_IRQHandler+0x22>
 8000668:	4b2a      	ldr	r3, [pc, #168]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 800066a:	695b      	ldr	r3, [r3, #20]
 800066c:	4a29      	ldr	r2, [pc, #164]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 800066e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000672:	6153      	str	r3, [r2, #20]
 8000674:	4b28      	ldr	r3, [pc, #160]	; (8000718 <EXTI15_10_IRQHandler+0xc0>)
 8000676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000678:	4798      	blx	r3
	if((EXTI->EXTI_PR )& (1<<11)){EXTI->EXTI_PR |= (1 << 11) ;	GP_IRQ_CallBack[11]();}
 800067a:	4b26      	ldr	r3, [pc, #152]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000682:	2b00      	cmp	r3, #0
 8000684:	d008      	beq.n	8000698 <EXTI15_10_IRQHandler+0x40>
 8000686:	4b23      	ldr	r3, [pc, #140]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 8000688:	695b      	ldr	r3, [r3, #20]
 800068a:	4a22      	ldr	r2, [pc, #136]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 800068c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000690:	6153      	str	r3, [r2, #20]
 8000692:	4b21      	ldr	r3, [pc, #132]	; (8000718 <EXTI15_10_IRQHandler+0xc0>)
 8000694:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000696:	4798      	blx	r3
	if((EXTI->EXTI_PR )& (1<<12)){EXTI->EXTI_PR |= (1 << 12) ;	GP_IRQ_CallBack[12]();}
 8000698:	4b1e      	ldr	r3, [pc, #120]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 800069a:	695b      	ldr	r3, [r3, #20]
 800069c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d008      	beq.n	80006b6 <EXTI15_10_IRQHandler+0x5e>
 80006a4:	4b1b      	ldr	r3, [pc, #108]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 80006a6:	695b      	ldr	r3, [r3, #20]
 80006a8:	4a1a      	ldr	r2, [pc, #104]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 80006aa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80006ae:	6153      	str	r3, [r2, #20]
 80006b0:	4b19      	ldr	r3, [pc, #100]	; (8000718 <EXTI15_10_IRQHandler+0xc0>)
 80006b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b4:	4798      	blx	r3
	if((EXTI->EXTI_PR )& (1<<13)){EXTI->EXTI_PR |= (1 << 13) ;	GP_IRQ_CallBack[13]();}
 80006b6:	4b17      	ldr	r3, [pc, #92]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 80006b8:	695b      	ldr	r3, [r3, #20]
 80006ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d008      	beq.n	80006d4 <EXTI15_10_IRQHandler+0x7c>
 80006c2:	4b14      	ldr	r3, [pc, #80]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 80006c4:	695b      	ldr	r3, [r3, #20]
 80006c6:	4a13      	ldr	r2, [pc, #76]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 80006c8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80006cc:	6153      	str	r3, [r2, #20]
 80006ce:	4b12      	ldr	r3, [pc, #72]	; (8000718 <EXTI15_10_IRQHandler+0xc0>)
 80006d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006d2:	4798      	blx	r3
	if((EXTI->EXTI_PR )& (1<<14)){EXTI->EXTI_PR |= (1 << 14) ;	GP_IRQ_CallBack[14]();}
 80006d4:	4b0f      	ldr	r3, [pc, #60]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 80006d6:	695b      	ldr	r3, [r3, #20]
 80006d8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80006dc:	2b00      	cmp	r3, #0
 80006de:	d008      	beq.n	80006f2 <EXTI15_10_IRQHandler+0x9a>
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 80006e2:	695b      	ldr	r3, [r3, #20]
 80006e4:	4a0b      	ldr	r2, [pc, #44]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 80006e6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006ea:	6153      	str	r3, [r2, #20]
 80006ec:	4b0a      	ldr	r3, [pc, #40]	; (8000718 <EXTI15_10_IRQHandler+0xc0>)
 80006ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80006f0:	4798      	blx	r3
	if((EXTI->EXTI_PR )& (1<<15)){EXTI->EXTI_PR |= (1 << 15) ;	GP_IRQ_CallBack[15]();}
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 80006f4:	695b      	ldr	r3, [r3, #20]
 80006f6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d008      	beq.n	8000710 <EXTI15_10_IRQHandler+0xb8>
 80006fe:	4b05      	ldr	r3, [pc, #20]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	4a04      	ldr	r2, [pc, #16]	; (8000714 <EXTI15_10_IRQHandler+0xbc>)
 8000704:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000708:	6153      	str	r3, [r2, #20]
 800070a:	4b03      	ldr	r3, [pc, #12]	; (8000718 <EXTI15_10_IRQHandler+0xc0>)
 800070c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800070e:	4798      	blx	r3

}
 8000710:	bf00      	nop
 8000712:	bd80      	pop	{r7, pc}
 8000714:	40010400 	.word	0x40010400
 8000718:	20000024 	.word	0x20000024

0800071c <Get_CRLH_Position>:
 * @param [in]    - Pin_Number : pin number according to @ref GPIO_PINS_Define
 * @retval        - The value of shift which will be used to configure the pin
 * Note           - none
===========================================================================================================================*/
uint8_t Get_CRLH_Position(uint16_t Pin_Number)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	80fb      	strh	r3, [r7, #6]
	// we will switch on the number of pin
	switch (Pin_Number)
 8000726:	88fb      	ldrh	r3, [r7, #6]
 8000728:	2b80      	cmp	r3, #128	; 0x80
 800072a:	d042      	beq.n	80007b2 <Get_CRLH_Position+0x96>
 800072c:	2b80      	cmp	r3, #128	; 0x80
 800072e:	dc11      	bgt.n	8000754 <Get_CRLH_Position+0x38>
 8000730:	2b08      	cmp	r3, #8
 8000732:	d036      	beq.n	80007a2 <Get_CRLH_Position+0x86>
 8000734:	2b08      	cmp	r3, #8
 8000736:	dc06      	bgt.n	8000746 <Get_CRLH_Position+0x2a>
 8000738:	2b02      	cmp	r3, #2
 800073a:	d02e      	beq.n	800079a <Get_CRLH_Position+0x7e>
 800073c:	2b04      	cmp	r3, #4
 800073e:	d02e      	beq.n	800079e <Get_CRLH_Position+0x82>
 8000740:	2b01      	cmp	r3, #1
 8000742:	d028      	beq.n	8000796 <Get_CRLH_Position+0x7a>
 8000744:	e047      	b.n	80007d6 <Get_CRLH_Position+0xba>
 8000746:	2b20      	cmp	r3, #32
 8000748:	d02f      	beq.n	80007aa <Get_CRLH_Position+0x8e>
 800074a:	2b40      	cmp	r3, #64	; 0x40
 800074c:	d02f      	beq.n	80007ae <Get_CRLH_Position+0x92>
 800074e:	2b10      	cmp	r3, #16
 8000750:	d029      	beq.n	80007a6 <Get_CRLH_Position+0x8a>
 8000752:	e040      	b.n	80007d6 <Get_CRLH_Position+0xba>
 8000754:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000758:	d033      	beq.n	80007c2 <Get_CRLH_Position+0xa6>
 800075a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800075e:	dc09      	bgt.n	8000774 <Get_CRLH_Position+0x58>
 8000760:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000764:	d029      	beq.n	80007ba <Get_CRLH_Position+0x9e>
 8000766:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800076a:	d028      	beq.n	80007be <Get_CRLH_Position+0xa2>
 800076c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000770:	d021      	beq.n	80007b6 <Get_CRLH_Position+0x9a>
 8000772:	e030      	b.n	80007d6 <Get_CRLH_Position+0xba>
 8000774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000778:	d027      	beq.n	80007ca <Get_CRLH_Position+0xae>
 800077a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800077e:	dc03      	bgt.n	8000788 <Get_CRLH_Position+0x6c>
 8000780:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000784:	d01f      	beq.n	80007c6 <Get_CRLH_Position+0xaa>
 8000786:	e026      	b.n	80007d6 <Get_CRLH_Position+0xba>
 8000788:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800078c:	d01f      	beq.n	80007ce <Get_CRLH_Position+0xb2>
 800078e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000792:	d01e      	beq.n	80007d2 <Get_CRLH_Position+0xb6>
 8000794:	e01f      	b.n	80007d6 <Get_CRLH_Position+0xba>
	{
	case GPIO_PIN_0:return 0;  break;
 8000796:	2300      	movs	r3, #0
 8000798:	e01e      	b.n	80007d8 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_1:return 4;  break;
 800079a:	2304      	movs	r3, #4
 800079c:	e01c      	b.n	80007d8 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_2:return 8;  break;
 800079e:	2308      	movs	r3, #8
 80007a0:	e01a      	b.n	80007d8 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_3:return 12; break;
 80007a2:	230c      	movs	r3, #12
 80007a4:	e018      	b.n	80007d8 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_4:return 16; break;
 80007a6:	2310      	movs	r3, #16
 80007a8:	e016      	b.n	80007d8 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_5:return 20; break;
 80007aa:	2314      	movs	r3, #20
 80007ac:	e014      	b.n	80007d8 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_6:return 24; break;
 80007ae:	2318      	movs	r3, #24
 80007b0:	e012      	b.n	80007d8 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_7:return 28; break;
 80007b2:	231c      	movs	r3, #28
 80007b4:	e010      	b.n	80007d8 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_8:return 0;  break;
 80007b6:	2300      	movs	r3, #0
 80007b8:	e00e      	b.n	80007d8 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_9:return 4;  break;
 80007ba:	2304      	movs	r3, #4
 80007bc:	e00c      	b.n	80007d8 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_10:return 8; break;
 80007be:	2308      	movs	r3, #8
 80007c0:	e00a      	b.n	80007d8 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_11:return 12;break;
 80007c2:	230c      	movs	r3, #12
 80007c4:	e008      	b.n	80007d8 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_12:return 16;break;
 80007c6:	2310      	movs	r3, #16
 80007c8:	e006      	b.n	80007d8 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_13:return 20;break;
 80007ca:	2314      	movs	r3, #20
 80007cc:	e004      	b.n	80007d8 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_14:return 24;break;
 80007ce:	2318      	movs	r3, #24
 80007d0:	e002      	b.n	80007d8 <Get_CRLH_Position+0xbc>
	case GPIO_PIN_15:return 28;break;
 80007d2:	231c      	movs	r3, #28
 80007d4:	e000      	b.n	80007d8 <Get_CRLH_Position+0xbc>

	}
	return 0;
 80007d6:	2300      	movs	r3, #0
}
 80007d8:	4618      	mov	r0, r3
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	bc80      	pop	{r7}
 80007e0:	4770      	bx	lr

080007e2 <MCAL_GPIO_Init>:
 * @retval        - none
 * Note           - STM32F103C6 MCU has a GPIO A/B/C/D/E modules but LQFP48 Package has only A/B and part of C/D
==========================================================================================================================*/

void MCAL_GPIO_Init(GPIO_TypeDef * GPIOx , GPIO_Pin_Config_t *PinConfig)
{
 80007e2:	b590      	push	{r4, r7, lr}
 80007e4:	b085      	sub	sp, #20
 80007e6:	af00      	add	r7, sp, #0
 80007e8:	6078      	str	r0, [r7, #4]
 80007ea:	6039      	str	r1, [r7, #0]
	// Port configuration register low (GPIOx_CRL) configure the pins 0 >>> 7
	// Port configuration register high (GPIOx_CRH) configure the pins 8 >>> 15
	// we will create a pointer to points to the register (CRL or CRH) according to condition that the pin number < 8 or not
	// and create a variable to set the value of the configuration in  o/p mode
	volatile uint32_t *Config_Register = NULL; uint8_t PIN_Confige = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	2300      	movs	r3, #0
 80007f2:	73fb      	strb	r3, [r7, #15]
	Config_Register = ((PinConfig->GPIO_PinNumber) < GPIO_PIN_8)?(&GPIOx->GPIO_CRL):(&GPIOx->GPIO_CRH);
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	881b      	ldrh	r3, [r3, #0]
 80007f8:	2bff      	cmp	r3, #255	; 0xff
 80007fa:	d801      	bhi.n	8000800 <MCAL_GPIO_Init+0x1e>
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	e001      	b.n	8000804 <MCAL_GPIO_Init+0x22>
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	3304      	adds	r3, #4
 8000804:	60bb      	str	r3, [r7, #8]
	// we will use the function Get_CRLH_Position to get the shift of pin ... each pin reserve 4 bit from the register

	// clear CNFx[1:0] MODEx[1:0]
	(*Config_Register) &= ~(0xF << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	881b      	ldrh	r3, [r3, #0]
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ff86 	bl	800071c <Get_CRLH_Position>
 8000810:	4603      	mov	r3, r0
 8000812:	461a      	mov	r2, r3
 8000814:	230f      	movs	r3, #15
 8000816:	4093      	lsls	r3, r2
 8000818:	43da      	mvns	r2, r3
 800081a:	68bb      	ldr	r3, [r7, #8]
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	401a      	ands	r2, r3
 8000820:	68bb      	ldr	r3, [r7, #8]
 8000822:	601a      	str	r2, [r3, #0]
	// if the pin in the Output modes
	if((PinConfig->GPIO_MODE == GPIO_MODE_Output_AF_OD) ||(PinConfig->GPIO_MODE == GPIO_MODE_Output_AF_PP)
 8000824:	683b      	ldr	r3, [r7, #0]
 8000826:	789b      	ldrb	r3, [r3, #2]
 8000828:	2b07      	cmp	r3, #7
 800082a:	d00b      	beq.n	8000844 <MCAL_GPIO_Init+0x62>
 800082c:	683b      	ldr	r3, [r7, #0]
 800082e:	789b      	ldrb	r3, [r3, #2]
 8000830:	2b06      	cmp	r3, #6
 8000832:	d007      	beq.n	8000844 <MCAL_GPIO_Init+0x62>
			||(PinConfig->GPIO_MODE == GPIO_MODE_Output_OD)||(PinConfig->GPIO_MODE == GPIO_MODE_Output_PP))
 8000834:	683b      	ldr	r3, [r7, #0]
 8000836:	789b      	ldrb	r3, [r3, #2]
 8000838:	2b05      	cmp	r3, #5
 800083a:	d003      	beq.n	8000844 <MCAL_GPIO_Init+0x62>
 800083c:	683b      	ldr	r3, [r7, #0]
 800083e:	789b      	ldrb	r3, [r3, #2]
 8000840:	2b04      	cmp	r3, #4
 8000842:	d10e      	bne.n	8000862 <MCAL_GPIO_Init+0x80>
	{
		// set CNFx[1:0] MODEx[1:0]
		PIN_Confige = (((PinConfig->GPIO_MODE - 4) << 2) | ((PinConfig->GPIO_Output_Speed) & 0x0f));
 8000844:	683b      	ldr	r3, [r7, #0]
 8000846:	789b      	ldrb	r3, [r3, #2]
 8000848:	3b04      	subs	r3, #4
 800084a:	009b      	lsls	r3, r3, #2
 800084c:	b25a      	sxtb	r2, r3
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	78db      	ldrb	r3, [r3, #3]
 8000852:	b25b      	sxtb	r3, r3
 8000854:	f003 030f 	and.w	r3, r3, #15
 8000858:	b25b      	sxtb	r3, r3
 800085a:	4313      	orrs	r3, r2
 800085c:	b25b      	sxtb	r3, r3
 800085e:	73fb      	strb	r3, [r7, #15]
 8000860:	e02c      	b.n	80008bc <MCAL_GPIO_Init+0xda>

	}
	// if the pin in i/p modes
	else // mode = 00 in case of i/p modes
	{
		if((PinConfig->GPIO_MODE == GPIO_MODE_Input_FLO) || (PinConfig->GPIO_MODE == GPIO_MODE_Analog))
 8000862:	683b      	ldr	r3, [r7, #0]
 8000864:	789b      	ldrb	r3, [r3, #2]
 8000866:	2b01      	cmp	r3, #1
 8000868:	d003      	beq.n	8000872 <MCAL_GPIO_Init+0x90>
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	789b      	ldrb	r3, [r3, #2]
 800086e:	2b00      	cmp	r3, #0
 8000870:	d107      	bne.n	8000882 <MCAL_GPIO_Init+0xa0>
		{
			// set CNFx[1:0] MODEx[1:0]
			PIN_Confige = (((PinConfig->GPIO_MODE << 2) | 0x0) & 0x0F);
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	789b      	ldrb	r3, [r3, #2]
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	b2db      	uxtb	r3, r3
 800087a:	f003 030f 	and.w	r3, r3, #15
 800087e:	73fb      	strb	r3, [r7, #15]
 8000880:	e01c      	b.n	80008bc <MCAL_GPIO_Init+0xda>

		}
		else if((PinConfig->GPIO_MODE == GPIO_MODE_AF_Input)) // consider it as input floating
 8000882:	683b      	ldr	r3, [r7, #0]
 8000884:	789b      	ldrb	r3, [r3, #2]
 8000886:	2b08      	cmp	r3, #8
 8000888:	d102      	bne.n	8000890 <MCAL_GPIO_Init+0xae>
		{
			// set CNFx[1:0] MODEx[1:0]
			PIN_Confige = (((GPIO_MODE_Input_FLO << 2) | 0x0) & 0x0F);
 800088a:	2304      	movs	r3, #4
 800088c:	73fb      	strb	r3, [r7, #15]
 800088e:	e015      	b.n	80008bc <MCAL_GPIO_Init+0xda>
		}
		else // the pin PD or PU modes
		{
			// set CNFx[1:0] MODEx[1:0]
			PIN_Confige = (((GPIO_MODE_Input_PU << 2) | 0x0) & 0x0F);
 8000890:	2308      	movs	r3, #8
 8000892:	73fb      	strb	r3, [r7, #15]

			if((PinConfig->GPIO_MODE == GPIO_MODE_Input_PU))
 8000894:	683b      	ldr	r3, [r7, #0]
 8000896:	789b      	ldrb	r3, [r3, #2]
 8000898:	2b02      	cmp	r3, #2
 800089a:	d107      	bne.n	80008ac <MCAL_GPIO_Init+0xca>
			{
				// PxODR = 1 if Pull up mode : Table 20. Port bit configuration table
				GPIOx->GPIO_ODR |=(PinConfig->GPIO_PinNumber);
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	683a      	ldr	r2, [r7, #0]
 80008a2:	8812      	ldrh	r2, [r2, #0]
 80008a4:	431a      	orrs	r2, r3
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	60da      	str	r2, [r3, #12]
 80008aa:	e007      	b.n	80008bc <MCAL_GPIO_Init+0xda>
			}
			else
			{
				// PxODR = 0 if Pull down mode : Table 20. Port bit configuration table
				GPIOx->GPIO_ODR &= ~(PinConfig->GPIO_PinNumber);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	68db      	ldr	r3, [r3, #12]
 80008b0:	683a      	ldr	r2, [r7, #0]
 80008b2:	8812      	ldrh	r2, [r2, #0]
 80008b4:	43d2      	mvns	r2, r2
 80008b6:	401a      	ands	r2, r3
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	60da      	str	r2, [r3, #12]

		}

	}
	// set the values on the register CRL or CRH
	(*Config_Register)|= (PIN_Confige << Get_CRLH_Position(PinConfig->GPIO_PinNumber));
 80008bc:	7bfc      	ldrb	r4, [r7, #15]
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	881b      	ldrh	r3, [r3, #0]
 80008c2:	4618      	mov	r0, r3
 80008c4:	f7ff ff2a 	bl	800071c <Get_CRLH_Position>
 80008c8:	4603      	mov	r3, r0
 80008ca:	fa04 f203 	lsl.w	r2, r4, r3
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	431a      	orrs	r2, r3
 80008d4:	68bb      	ldr	r3, [r7, #8]
 80008d6:	601a      	str	r2, [r3, #0]
}
 80008d8:	bf00      	nop
 80008da:	3714      	adds	r7, #20
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd90      	pop	{r4, r7, pc}

080008e0 <MCAL_GPIO_WRITE_PIN>:
 * @param [in]    - Value : the value will be Written in the pin
 * @retval        - none
 * Note           - none
===========================================================================================================================*/
void  MCAL_GPIO_WRITE_PIN(GPIO_TypeDef * GPIOx ,uint16_t Pin_Number,uint8_t Value)
{
 80008e0:	b480      	push	{r7}
 80008e2:	b083      	sub	sp, #12
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
 80008e8:	460b      	mov	r3, r1
 80008ea:	807b      	strh	r3, [r7, #2]
 80008ec:	4613      	mov	r3, r2
 80008ee:	707b      	strb	r3, [r7, #1]
	if(Value != (uint32_t)GPIO_PIN_RESET)
 80008f0:	787b      	ldrb	r3, [r7, #1]
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d003      	beq.n	80008fe <MCAL_GPIO_WRITE_PIN+0x1e>
	{
		//	Bits 15:0 BSy: Port x Set bit y (y= 0 .. 15)
		//	These bits are write-only and can be accessed in Word mode only.
		//	0: No action on the corresponding ODRx bit
		//	1: Set the corresponding ODRx bit
		GPIOx->GPIO_BSRR = (uint32_t)Pin_Number;
 80008f6:	887a      	ldrh	r2, [r7, #2]
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	611a      	str	r2, [r3, #16]
		//0: No action on the corresponding ODRx bit
		//1: Set the corresponding ODRx bit
		GPIOx->GPIO_BRR = (uint32_t)Pin_Number;
	}

}
 80008fc:	e002      	b.n	8000904 <MCAL_GPIO_WRITE_PIN+0x24>
		GPIOx->GPIO_BRR = (uint32_t)Pin_Number;
 80008fe:	887a      	ldrh	r2, [r7, #2]
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	615a      	str	r2, [r3, #20]
}
 8000904:	bf00      	nop
 8000906:	370c      	adds	r7, #12
 8000908:	46bd      	mov	sp, r7
 800090a:	bc80      	pop	{r7}
 800090c:	4770      	bx	lr

0800090e <MCAL_GPIO_WRITE_Port>:
 * @param [in]    - Value : the value will be Written in the port
 * @retval        - none
 * Note           - none
===========================================================================================================================*/
void  MCAL_GPIO_WRITE_Port(GPIO_TypeDef * GPIOx , uint16_t Value)
{
 800090e:	b480      	push	{r7}
 8000910:	b083      	sub	sp, #12
 8000912:	af00      	add	r7, sp, #0
 8000914:	6078      	str	r0, [r7, #4]
 8000916:	460b      	mov	r3, r1
 8000918:	807b      	strh	r3, [r7, #2]
	 // write the value on the ODR
		GPIOx->GPIO_ODR = Value ;
 800091a:	887a      	ldrh	r2, [r7, #2]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	60da      	str	r2, [r3, #12]
}
 8000920:	bf00      	nop
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	bc80      	pop	{r7}
 8000928:	4770      	bx	lr

0800092a <wait_ms>:
// Configuration of input and output pins
GPIO_Pin_Config_t PinCfg ;

//function to make delay
void wait_ms(int x)
{
 800092a:	b480      	push	{r7}
 800092c:	b085      	sub	sp, #20
 800092e:	af00      	add	r7, sp, #0
 8000930:	6078      	str	r0, [r7, #4]
	vuint32_t count1 , count2 ;
	for(count1 = 0 ; count1 < x ;count1++ )
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	e00c      	b.n	8000952 <wait_ms+0x28>
	{
		for(count2 = 0 ; count2 < 255 ; count2++)
 8000938:	2300      	movs	r3, #0
 800093a:	60bb      	str	r3, [r7, #8]
 800093c:	e003      	b.n	8000946 <wait_ms+0x1c>
		{
			asm("nop");
 800093e:	bf00      	nop
		for(count2 = 0 ; count2 < 255 ; count2++)
 8000940:	68bb      	ldr	r3, [r7, #8]
 8000942:	3301      	adds	r3, #1
 8000944:	60bb      	str	r3, [r7, #8]
 8000946:	68bb      	ldr	r3, [r7, #8]
 8000948:	2bfe      	cmp	r3, #254	; 0xfe
 800094a:	d9f8      	bls.n	800093e <wait_ms+0x14>
	for(count1 = 0 ; count1 < x ;count1++ )
 800094c:	68fb      	ldr	r3, [r7, #12]
 800094e:	3301      	adds	r3, #1
 8000950:	60fb      	str	r3, [r7, #12]
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	429a      	cmp	r2, r3
 8000958:	d3ee      	bcc.n	8000938 <wait_ms+0xe>
		}
	}
}
 800095a:	bf00      	nop
 800095c:	3714      	adds	r7, #20
 800095e:	46bd      	mov	sp, r7
 8000960:	bc80      	pop	{r7}
 8000962:	4770      	bx	lr

08000964 <HAL_IS_LCD_BUSY>:
// counter to manipulate the end of rows when we write character by character
static int static_counter = 0 ;

// Implementation of the function
void HAL_IS_LCD_BUSY(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0
	// configure the Data Direction as input depending on the LCD Mode
#ifdef EIGHT_BIT_MODE
	// Set the data pins as i/p pins
	// pin 0
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 8000968:	4b66      	ldr	r3, [pc, #408]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 800096a:	2201      	movs	r2, #1
 800096c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Input_FLO;
 800096e:	4b65      	ldr	r3, [pc, #404]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000970:	2201      	movs	r2, #1
 8000972:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000974:	4963      	ldr	r1, [pc, #396]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000976:	4864      	ldr	r0, [pc, #400]	; (8000b08 <HAL_IS_LCD_BUSY+0x1a4>)
 8000978:	f7ff ff33 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 1
	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 800097c:	4b61      	ldr	r3, [pc, #388]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 800097e:	2202      	movs	r2, #2
 8000980:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Input_FLO;
 8000982:	4b60      	ldr	r3, [pc, #384]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000984:	2201      	movs	r2, #1
 8000986:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000988:	495e      	ldr	r1, [pc, #376]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 800098a:	485f      	ldr	r0, [pc, #380]	; (8000b08 <HAL_IS_LCD_BUSY+0x1a4>)
 800098c:	f7ff ff29 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 2
	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000990:	4b5c      	ldr	r3, [pc, #368]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000992:	2204      	movs	r2, #4
 8000994:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Input_FLO;
 8000996:	4b5b      	ldr	r3, [pc, #364]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000998:	2201      	movs	r2, #1
 800099a:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 800099c:	4959      	ldr	r1, [pc, #356]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 800099e:	485a      	ldr	r0, [pc, #360]	; (8000b08 <HAL_IS_LCD_BUSY+0x1a4>)
 80009a0:	f7ff ff1f 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 3
	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 80009a4:	4b57      	ldr	r3, [pc, #348]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 80009a6:	2208      	movs	r2, #8
 80009a8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Input_FLO;
 80009aa:	4b56      	ldr	r3, [pc, #344]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 80009b0:	4954      	ldr	r1, [pc, #336]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 80009b2:	4855      	ldr	r0, [pc, #340]	; (8000b08 <HAL_IS_LCD_BUSY+0x1a4>)
 80009b4:	f7ff ff15 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 4
	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 80009b8:	4b52      	ldr	r3, [pc, #328]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 80009ba:	2210      	movs	r2, #16
 80009bc:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Input_FLO;
 80009be:	4b51      	ldr	r3, [pc, #324]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 80009c0:	2201      	movs	r2, #1
 80009c2:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 80009c4:	494f      	ldr	r1, [pc, #316]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 80009c6:	4850      	ldr	r0, [pc, #320]	; (8000b08 <HAL_IS_LCD_BUSY+0x1a4>)
 80009c8:	f7ff ff0b 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 5
	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 80009cc:	4b4d      	ldr	r3, [pc, #308]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 80009ce:	2220      	movs	r2, #32
 80009d0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Input_FLO;
 80009d2:	4b4c      	ldr	r3, [pc, #304]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 80009d4:	2201      	movs	r2, #1
 80009d6:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 80009d8:	494a      	ldr	r1, [pc, #296]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 80009da:	484b      	ldr	r0, [pc, #300]	; (8000b08 <HAL_IS_LCD_BUSY+0x1a4>)
 80009dc:	f7ff ff01 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 6
	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 80009e0:	4b48      	ldr	r3, [pc, #288]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 80009e2:	2240      	movs	r2, #64	; 0x40
 80009e4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Input_FLO;
 80009e6:	4b47      	ldr	r3, [pc, #284]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 80009e8:	2201      	movs	r2, #1
 80009ea:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 80009ec:	4945      	ldr	r1, [pc, #276]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 80009ee:	4846      	ldr	r0, [pc, #280]	; (8000b08 <HAL_IS_LCD_BUSY+0x1a4>)
 80009f0:	f7ff fef7 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 7
	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 80009f4:	4b43      	ldr	r3, [pc, #268]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 80009f6:	2280      	movs	r2, #128	; 0x80
 80009f8:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Input_FLO;
 80009fa:	4b42      	ldr	r3, [pc, #264]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 80009fc:	2201      	movs	r2, #1
 80009fe:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000a00:	4940      	ldr	r1, [pc, #256]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000a02:	4841      	ldr	r0, [pc, #260]	; (8000b08 <HAL_IS_LCD_BUSY+0x1a4>)
 8000a04:	f7ff feed 	bl	80007e2 <MCAL_GPIO_Init>
	MCAL_GPIO_Init(LCD_Port, &PinCfg);

#endif

	// Set the LCD in read mode (RW on).
	MCAL_GPIO_WRITE_PIN(LCD_Port, RW_SWITCH, GPIO_PIN_SET);
 8000a08:	2201      	movs	r2, #1
 8000a0a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a0e:	483e      	ldr	r0, [pc, #248]	; (8000b08 <HAL_IS_LCD_BUSY+0x1a4>)
 8000a10:	f7ff ff66 	bl	80008e0 <MCAL_GPIO_WRITE_PIN>
	// Reset the LCD in command mode (RS off).
	MCAL_GPIO_WRITE_PIN(LCD_Port, RS_SWITCH, GPIO_PIN_RESET);
 8000a14:	2200      	movs	r2, #0
 8000a16:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000a1a:	483b      	ldr	r0, [pc, #236]	; (8000b08 <HAL_IS_LCD_BUSY+0x1a4>)
 8000a1c:	f7ff ff60 	bl	80008e0 <MCAL_GPIO_WRITE_PIN>
	HAL_LCD_KICK();
 8000a20:	f000 f874 	bl	8000b0c <HAL_LCD_KICK>
	// change the Data Direction port as output port
#ifdef EIGHT_BIT_MODE
	// Set the data pins as o/p pins with 10 MHz speed
	// pin 0
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 8000a24:	4b37      	ldr	r3, [pc, #220]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000a2a:	4b36      	ldr	r3, [pc, #216]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000a2c:	2204      	movs	r2, #4
 8000a2e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000a30:	4b34      	ldr	r3, [pc, #208]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000a32:	2201      	movs	r2, #1
 8000a34:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000a36:	4933      	ldr	r1, [pc, #204]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000a38:	4833      	ldr	r0, [pc, #204]	; (8000b08 <HAL_IS_LCD_BUSY+0x1a4>)
 8000a3a:	f7ff fed2 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 1
	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 8000a3e:	4b31      	ldr	r3, [pc, #196]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000a40:	2202      	movs	r2, #2
 8000a42:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000a44:	4b2f      	ldr	r3, [pc, #188]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000a46:	2204      	movs	r2, #4
 8000a48:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000a4a:	4b2e      	ldr	r3, [pc, #184]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000a4c:	2201      	movs	r2, #1
 8000a4e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000a50:	492c      	ldr	r1, [pc, #176]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000a52:	482d      	ldr	r0, [pc, #180]	; (8000b08 <HAL_IS_LCD_BUSY+0x1a4>)
 8000a54:	f7ff fec5 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 2
	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000a58:	4b2a      	ldr	r3, [pc, #168]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000a5a:	2204      	movs	r2, #4
 8000a5c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000a5e:	4b29      	ldr	r3, [pc, #164]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000a60:	2204      	movs	r2, #4
 8000a62:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000a64:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000a66:	2201      	movs	r2, #1
 8000a68:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000a6a:	4926      	ldr	r1, [pc, #152]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000a6c:	4826      	ldr	r0, [pc, #152]	; (8000b08 <HAL_IS_LCD_BUSY+0x1a4>)
 8000a6e:	f7ff feb8 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 3
	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000a72:	4b24      	ldr	r3, [pc, #144]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000a74:	2208      	movs	r2, #8
 8000a76:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000a78:	4b22      	ldr	r3, [pc, #136]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000a7a:	2204      	movs	r2, #4
 8000a7c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000a7e:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000a80:	2201      	movs	r2, #1
 8000a82:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000a84:	491f      	ldr	r1, [pc, #124]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000a86:	4820      	ldr	r0, [pc, #128]	; (8000b08 <HAL_IS_LCD_BUSY+0x1a4>)
 8000a88:	f7ff feab 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 4
	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000a8c:	4b1d      	ldr	r3, [pc, #116]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000a8e:	2210      	movs	r2, #16
 8000a90:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000a92:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000a94:	2204      	movs	r2, #4
 8000a96:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000a98:	4b1a      	ldr	r3, [pc, #104]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000a9a:	2201      	movs	r2, #1
 8000a9c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000a9e:	4919      	ldr	r1, [pc, #100]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000aa0:	4819      	ldr	r0, [pc, #100]	; (8000b08 <HAL_IS_LCD_BUSY+0x1a4>)
 8000aa2:	f7ff fe9e 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 5
	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000aa6:	4b17      	ldr	r3, [pc, #92]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000aa8:	2220      	movs	r2, #32
 8000aaa:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000aae:	2204      	movs	r2, #4
 8000ab0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000ab2:	4b14      	ldr	r3, [pc, #80]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000ab4:	2201      	movs	r2, #1
 8000ab6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000ab8:	4912      	ldr	r1, [pc, #72]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000aba:	4813      	ldr	r0, [pc, #76]	; (8000b08 <HAL_IS_LCD_BUSY+0x1a4>)
 8000abc:	f7ff fe91 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 6
	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000ac0:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000ac2:	2240      	movs	r2, #64	; 0x40
 8000ac4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000ac6:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000ac8:	2204      	movs	r2, #4
 8000aca:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000acc:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000ad2:	490c      	ldr	r1, [pc, #48]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000ad4:	480c      	ldr	r0, [pc, #48]	; (8000b08 <HAL_IS_LCD_BUSY+0x1a4>)
 8000ad6:	f7ff fe84 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 7
	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000adc:	2280      	movs	r2, #128	; 0x80
 8000ade:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000ae2:	2204      	movs	r2, #4
 8000ae4:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000ae6:	4b07      	ldr	r3, [pc, #28]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000ae8:	2201      	movs	r2, #1
 8000aea:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000aec:	4905      	ldr	r1, [pc, #20]	; (8000b04 <HAL_IS_LCD_BUSY+0x1a0>)
 8000aee:	4806      	ldr	r0, [pc, #24]	; (8000b08 <HAL_IS_LCD_BUSY+0x1a4>)
 8000af0:	f7ff fe77 	bl	80007e2 <MCAL_GPIO_Init>
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
	MCAL_GPIO_Init(LCD_Port, &PinCfg);

#endif
	// Set the LCD in Write mode (RW off)
	MCAL_GPIO_WRITE_PIN(LCD_Port, RW_SWITCH, GPIO_PIN_RESET);
 8000af4:	2200      	movs	r2, #0
 8000af6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000afa:	4803      	ldr	r0, [pc, #12]	; (8000b08 <HAL_IS_LCD_BUSY+0x1a4>)
 8000afc:	f7ff fef0 	bl	80008e0 <MCAL_GPIO_WRITE_PIN>
}
 8000b00:	bf00      	nop
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000064 	.word	0x20000064
 8000b08:	40010800 	.word	0x40010800

08000b0c <HAL_LCD_KICK>:

void HAL_LCD_KICK()
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
	// set the Enable Switch
	MCAL_GPIO_WRITE_PIN(LCD_Port, ENABLE_SWITCH, GPIO_PIN_SET);
 8000b10:	2201      	movs	r2, #1
 8000b12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b16:	4808      	ldr	r0, [pc, #32]	; (8000b38 <HAL_LCD_KICK+0x2c>)
 8000b18:	f7ff fee2 	bl	80008e0 <MCAL_GPIO_WRITE_PIN>
	// Wait for period
	asm volatile ("nop");
 8000b1c:	bf00      	nop
	asm volatile ("nop");
 8000b1e:	bf00      	nop
	wait_ms(50);
 8000b20:	2032      	movs	r0, #50	; 0x32
 8000b22:	f7ff ff02 	bl	800092a <wait_ms>
	// reSet the Enable Switch
	MCAL_GPIO_WRITE_PIN(LCD_Port, ENABLE_SWITCH, GPIO_PIN_RESET);
 8000b26:	2200      	movs	r2, #0
 8000b28:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <HAL_LCD_KICK+0x2c>)
 8000b2e:	f7ff fed7 	bl	80008e0 <MCAL_GPIO_WRITE_PIN>
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	40010800 	.word	0x40010800

08000b3c <HAL_LCD_init>:

void HAL_LCD_init()
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	af00      	add	r7, sp, #0
	// wait a 30 ms to warm up the LCD
	wait_ms(100);
 8000b40:	2064      	movs	r0, #100	; 0x64
 8000b42:	f7ff fef2 	bl	800092a <wait_ms>
	// check if the LCD is busy
	HAL_IS_LCD_BUSY();
 8000b46:	f7ff ff0d 	bl	8000964 <HAL_IS_LCD_BUSY>
	// Set the control pins as o/p pins
	// RS Pin
	PinCfg.GPIO_PinNumber = RS_SWITCH;
 8000b4a:	4b5a      	ldr	r3, [pc, #360]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000b4c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b50:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000b52:	4b58      	ldr	r3, [pc, #352]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000b54:	2204      	movs	r2, #4
 8000b56:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000b58:	4b56      	ldr	r3, [pc, #344]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000b5a:	2201      	movs	r2, #1
 8000b5c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000b5e:	4955      	ldr	r1, [pc, #340]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000b60:	4855      	ldr	r0, [pc, #340]	; (8000cb8 <HAL_LCD_init+0x17c>)
 8000b62:	f7ff fe3e 	bl	80007e2 <MCAL_GPIO_Init>
	// READ_WRITE pin
	PinCfg.GPIO_PinNumber = RW_SWITCH;
 8000b66:	4b53      	ldr	r3, [pc, #332]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000b68:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000b6c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000b6e:	4b51      	ldr	r3, [pc, #324]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000b70:	2204      	movs	r2, #4
 8000b72:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000b74:	4b4f      	ldr	r3, [pc, #316]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000b76:	2201      	movs	r2, #1
 8000b78:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000b7a:	494e      	ldr	r1, [pc, #312]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000b7c:	484e      	ldr	r0, [pc, #312]	; (8000cb8 <HAL_LCD_init+0x17c>)
 8000b7e:	f7ff fe30 	bl	80007e2 <MCAL_GPIO_Init>
	// Enable Pin
	PinCfg.GPIO_PinNumber = ENABLE_SWITCH;
 8000b82:	4b4c      	ldr	r3, [pc, #304]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000b84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b88:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000b8a:	4b4a      	ldr	r3, [pc, #296]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000b8c:	2204      	movs	r2, #4
 8000b8e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000b90:	4b48      	ldr	r3, [pc, #288]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000b92:	2201      	movs	r2, #1
 8000b94:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000b96:	4947      	ldr	r1, [pc, #284]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000b98:	4847      	ldr	r0, [pc, #284]	; (8000cb8 <HAL_LCD_init+0x17c>)
 8000b9a:	f7ff fe22 	bl	80007e2 <MCAL_GPIO_Init>
	// Reset the control pins
	MCAL_GPIO_WRITE_PIN(LCD_Port, RS_SWITCH, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000ba4:	4844      	ldr	r0, [pc, #272]	; (8000cb8 <HAL_LCD_init+0x17c>)
 8000ba6:	f7ff fe9b 	bl	80008e0 <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(LCD_Port, RW_SWITCH, GPIO_PIN_RESET);
 8000baa:	2200      	movs	r2, #0
 8000bac:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000bb0:	4841      	ldr	r0, [pc, #260]	; (8000cb8 <HAL_LCD_init+0x17c>)
 8000bb2:	f7ff fe95 	bl	80008e0 <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(LCD_Port, ENABLE_SWITCH, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bbc:	483e      	ldr	r0, [pc, #248]	; (8000cb8 <HAL_LCD_init+0x17c>)
 8000bbe:	f7ff fe8f 	bl	80008e0 <MCAL_GPIO_WRITE_PIN>
	// configure the mode of the LCD
#ifdef EIGHT_BIT_MODE
	// Set the data pins as o/p pins with 10 MHz speed
	// pin 0
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 8000bc2:	4b3c      	ldr	r3, [pc, #240]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000bc8:	4b3a      	ldr	r3, [pc, #232]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000bca:	2204      	movs	r2, #4
 8000bcc:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000bce:	4b39      	ldr	r3, [pc, #228]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000bd0:	2201      	movs	r2, #1
 8000bd2:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000bd4:	4937      	ldr	r1, [pc, #220]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000bd6:	4838      	ldr	r0, [pc, #224]	; (8000cb8 <HAL_LCD_init+0x17c>)
 8000bd8:	f7ff fe03 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 1
	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 8000bdc:	4b35      	ldr	r3, [pc, #212]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000bde:	2202      	movs	r2, #2
 8000be0:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000be2:	4b34      	ldr	r3, [pc, #208]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000be4:	2204      	movs	r2, #4
 8000be6:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000be8:	4b32      	ldr	r3, [pc, #200]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000bea:	2201      	movs	r2, #1
 8000bec:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000bee:	4931      	ldr	r1, [pc, #196]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000bf0:	4831      	ldr	r0, [pc, #196]	; (8000cb8 <HAL_LCD_init+0x17c>)
 8000bf2:	f7ff fdf6 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 2
	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000bf6:	4b2f      	ldr	r3, [pc, #188]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000bf8:	2204      	movs	r2, #4
 8000bfa:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000bfc:	4b2d      	ldr	r3, [pc, #180]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000bfe:	2204      	movs	r2, #4
 8000c00:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000c02:	4b2c      	ldr	r3, [pc, #176]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000c04:	2201      	movs	r2, #1
 8000c06:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000c08:	492a      	ldr	r1, [pc, #168]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000c0a:	482b      	ldr	r0, [pc, #172]	; (8000cb8 <HAL_LCD_init+0x17c>)
 8000c0c:	f7ff fde9 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 3
	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000c10:	4b28      	ldr	r3, [pc, #160]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000c12:	2208      	movs	r2, #8
 8000c14:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000c16:	4b27      	ldr	r3, [pc, #156]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000c18:	2204      	movs	r2, #4
 8000c1a:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000c1c:	4b25      	ldr	r3, [pc, #148]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000c1e:	2201      	movs	r2, #1
 8000c20:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000c22:	4924      	ldr	r1, [pc, #144]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000c24:	4824      	ldr	r0, [pc, #144]	; (8000cb8 <HAL_LCD_init+0x17c>)
 8000c26:	f7ff fddc 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 4
	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000c2a:	4b22      	ldr	r3, [pc, #136]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000c2c:	2210      	movs	r2, #16
 8000c2e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000c30:	4b20      	ldr	r3, [pc, #128]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000c32:	2204      	movs	r2, #4
 8000c34:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000c36:	4b1f      	ldr	r3, [pc, #124]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000c3c:	491d      	ldr	r1, [pc, #116]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000c3e:	481e      	ldr	r0, [pc, #120]	; (8000cb8 <HAL_LCD_init+0x17c>)
 8000c40:	f7ff fdcf 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 5
	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000c46:	2220      	movs	r2, #32
 8000c48:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000c4c:	2204      	movs	r2, #4
 8000c4e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000c50:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000c52:	2201      	movs	r2, #1
 8000c54:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000c56:	4917      	ldr	r1, [pc, #92]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000c58:	4817      	ldr	r0, [pc, #92]	; (8000cb8 <HAL_LCD_init+0x17c>)
 8000c5a:	f7ff fdc2 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 6
	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000c5e:	4b15      	ldr	r3, [pc, #84]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000c60:	2240      	movs	r2, #64	; 0x40
 8000c62:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000c64:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000c66:	2204      	movs	r2, #4
 8000c68:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000c6a:	4b12      	ldr	r3, [pc, #72]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000c6c:	2201      	movs	r2, #1
 8000c6e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000c70:	4910      	ldr	r1, [pc, #64]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000c72:	4811      	ldr	r0, [pc, #68]	; (8000cb8 <HAL_LCD_init+0x17c>)
 8000c74:	f7ff fdb5 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 7
	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000c78:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000c7a:	2280      	movs	r2, #128	; 0x80
 8000c7c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000c7e:	4b0d      	ldr	r3, [pc, #52]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000c80:	2204      	movs	r2, #4
 8000c82:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000c84:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000c8a:	490a      	ldr	r1, [pc, #40]	; (8000cb4 <HAL_LCD_init+0x178>)
 8000c8c:	480a      	ldr	r0, [pc, #40]	; (8000cb8 <HAL_LCD_init+0x17c>)
 8000c8e:	f7ff fda8 	bl	80007e2 <MCAL_GPIO_Init>

	// clear the Screen
	HAL_LCD_CLEAR_SCREEN_FUNC();
 8000c92:	f000 f935 	bl	8000f00 <HAL_LCD_CLEAR_SCREEN_FUNC>
	HAL_LCD_WRITE_CMD(LCD_FUNCTION_8BIT_2LINES);
 8000c96:	2038      	movs	r0, #56	; 0x38
 8000c98:	f000 f810 	bl	8000cbc <HAL_LCD_WRITE_CMD>
	HAL_LCD_CLEAR_SCREEN_FUNC();
	HAL_LCD_WRITE_CMD(0x02);
	HAL_LCD_WRITE_CMD(LCD_FUNCTION_4BIT_2LINES);
	wait_ms(2);
#endif
	HAL_LCD_WRITE_CMD(LCD_ENTRY_MODE);
 8000c9c:	2006      	movs	r0, #6
 8000c9e:	f000 f80d 	bl	8000cbc <HAL_LCD_WRITE_CMD>
	HAL_LCD_WRITE_CMD(LCD_BEGIN_AT_FIRST_ROW);
 8000ca2:	2080      	movs	r0, #128	; 0x80
 8000ca4:	f000 f80a 	bl	8000cbc <HAL_LCD_WRITE_CMD>
	HAL_LCD_WRITE_CMD(LCD_DISP_ON_CURSOR_BLINKING);
 8000ca8:	200f      	movs	r0, #15
 8000caa:	f000 f807 	bl	8000cbc <HAL_LCD_WRITE_CMD>
}
 8000cae:	bf00      	nop
 8000cb0:	bd80      	pop	{r7, pc}
 8000cb2:	bf00      	nop
 8000cb4:	20000064 	.word	0x20000064
 8000cb8:	40010800 	.word	0x40010800

08000cbc <HAL_LCD_WRITE_CMD>:

void HAL_LCD_WRITE_CMD(uint16_t CMD)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	80fb      	strh	r3, [r7, #6]
#ifdef EIGHT_BIT_MODE
	// check if the LCD is busy or not
	HAL_IS_LCD_BUSY();
 8000cc6:	f7ff fe4d 	bl	8000964 <HAL_IS_LCD_BUSY>
	// Write the command to Data Register
	MCAL_GPIO_WRITE_Port(LCD_Port, CMD);
 8000cca:	88fb      	ldrh	r3, [r7, #6]
 8000ccc:	4619      	mov	r1, r3
 8000cce:	480a      	ldr	r0, [pc, #40]	; (8000cf8 <HAL_LCD_WRITE_CMD+0x3c>)
 8000cd0:	f7ff fe1d 	bl	800090e <MCAL_GPIO_WRITE_Port>
	// Reset the RW , RS Pins
	MCAL_GPIO_WRITE_PIN(LCD_Port, RS_SWITCH, GPIO_PIN_RESET);
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cda:	4807      	ldr	r0, [pc, #28]	; (8000cf8 <HAL_LCD_WRITE_CMD+0x3c>)
 8000cdc:	f7ff fe00 	bl	80008e0 <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(LCD_Port, RW_SWITCH, GPIO_PIN_RESET);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000ce6:	4804      	ldr	r0, [pc, #16]	; (8000cf8 <HAL_LCD_WRITE_CMD+0x3c>)
 8000ce8:	f7ff fdfa 	bl	80008e0 <MCAL_GPIO_WRITE_PIN>
	HAL_LCD_KICK();
 8000cec:	f7ff ff0e 	bl	8000b0c <HAL_LCD_KICK>
	MCAL_GPIO_WRITE_PIN(LCD_Port, RW_SWITCH, GPIO_PIN_RESET);
	wait_ms(2);
	HAL_LCD_KICK();
#endif

}
 8000cf0:	bf00      	nop
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	40010800 	.word	0x40010800

08000cfc <HAL_LCD_WRITE_CHAR>:
void HAL_LCD_WRITE_CHAR(uint16_t CHAR)
{
 8000cfc:	b580      	push	{r7, lr}
 8000cfe:	b082      	sub	sp, #8
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	80fb      	strh	r3, [r7, #6]
#ifdef EIGHT_BIT_MODE
	// check if the LCD is busy or not
	HAL_IS_LCD_BUSY();
 8000d06:	f7ff fe2d 	bl	8000964 <HAL_IS_LCD_BUSY>
	// Set the Port Pins as O/p Pins
	// Set the data pins as o/p pins with 10 MHz speed
	// pin 0
	PinCfg.GPIO_PinNumber = GPIO_PIN_0;
 8000d0a:	4b4b      	ldr	r3, [pc, #300]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000d0c:	2201      	movs	r2, #1
 8000d0e:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000d10:	4b49      	ldr	r3, [pc, #292]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000d12:	2204      	movs	r2, #4
 8000d14:	709a      	strb	r2, [r3, #2]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000d16:	4948      	ldr	r1, [pc, #288]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000d18:	4848      	ldr	r0, [pc, #288]	; (8000e3c <HAL_LCD_WRITE_CHAR+0x140>)
 8000d1a:	f7ff fd62 	bl	80007e2 <MCAL_GPIO_Init>
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000d1e:	4b46      	ldr	r3, [pc, #280]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000d20:	2201      	movs	r2, #1
 8000d22:	70da      	strb	r2, [r3, #3]
	// pin 1
	PinCfg.GPIO_PinNumber = GPIO_PIN_1;
 8000d24:	4b44      	ldr	r3, [pc, #272]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000d26:	2202      	movs	r2, #2
 8000d28:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000d2a:	4b43      	ldr	r3, [pc, #268]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000d2c:	2204      	movs	r2, #4
 8000d2e:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000d30:	4b41      	ldr	r3, [pc, #260]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000d32:	2201      	movs	r2, #1
 8000d34:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000d36:	4940      	ldr	r1, [pc, #256]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000d38:	4840      	ldr	r0, [pc, #256]	; (8000e3c <HAL_LCD_WRITE_CHAR+0x140>)
 8000d3a:	f7ff fd52 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 2
	PinCfg.GPIO_PinNumber = GPIO_PIN_2;
 8000d3e:	4b3e      	ldr	r3, [pc, #248]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000d40:	2204      	movs	r2, #4
 8000d42:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000d44:	4b3c      	ldr	r3, [pc, #240]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000d46:	2204      	movs	r2, #4
 8000d48:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000d4a:	4b3b      	ldr	r3, [pc, #236]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000d4c:	2201      	movs	r2, #1
 8000d4e:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000d50:	4939      	ldr	r1, [pc, #228]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000d52:	483a      	ldr	r0, [pc, #232]	; (8000e3c <HAL_LCD_WRITE_CHAR+0x140>)
 8000d54:	f7ff fd45 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 3
	PinCfg.GPIO_PinNumber = GPIO_PIN_3;
 8000d58:	4b37      	ldr	r3, [pc, #220]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000d5a:	2208      	movs	r2, #8
 8000d5c:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000d5e:	4b36      	ldr	r3, [pc, #216]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000d60:	2204      	movs	r2, #4
 8000d62:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000d64:	4b34      	ldr	r3, [pc, #208]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000d66:	2201      	movs	r2, #1
 8000d68:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000d6a:	4933      	ldr	r1, [pc, #204]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000d6c:	4833      	ldr	r0, [pc, #204]	; (8000e3c <HAL_LCD_WRITE_CHAR+0x140>)
 8000d6e:	f7ff fd38 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 4
	PinCfg.GPIO_PinNumber = GPIO_PIN_4;
 8000d72:	4b31      	ldr	r3, [pc, #196]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000d74:	2210      	movs	r2, #16
 8000d76:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000d78:	4b2f      	ldr	r3, [pc, #188]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000d7a:	2204      	movs	r2, #4
 8000d7c:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000d7e:	4b2e      	ldr	r3, [pc, #184]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000d80:	2201      	movs	r2, #1
 8000d82:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000d84:	492c      	ldr	r1, [pc, #176]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000d86:	482d      	ldr	r0, [pc, #180]	; (8000e3c <HAL_LCD_WRITE_CHAR+0x140>)
 8000d88:	f7ff fd2b 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 5
	PinCfg.GPIO_PinNumber = GPIO_PIN_5;
 8000d8c:	4b2a      	ldr	r3, [pc, #168]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000d8e:	2220      	movs	r2, #32
 8000d90:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000d92:	4b29      	ldr	r3, [pc, #164]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000d94:	2204      	movs	r2, #4
 8000d96:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000d98:	4b27      	ldr	r3, [pc, #156]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000d9e:	4926      	ldr	r1, [pc, #152]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000da0:	4826      	ldr	r0, [pc, #152]	; (8000e3c <HAL_LCD_WRITE_CHAR+0x140>)
 8000da2:	f7ff fd1e 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 6
	PinCfg.GPIO_PinNumber = GPIO_PIN_6;
 8000da6:	4b24      	ldr	r3, [pc, #144]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000da8:	2240      	movs	r2, #64	; 0x40
 8000daa:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000dac:	4b22      	ldr	r3, [pc, #136]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000dae:	2204      	movs	r2, #4
 8000db0:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000db2:	4b21      	ldr	r3, [pc, #132]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000db4:	2201      	movs	r2, #1
 8000db6:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000db8:	491f      	ldr	r1, [pc, #124]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000dba:	4820      	ldr	r0, [pc, #128]	; (8000e3c <HAL_LCD_WRITE_CHAR+0x140>)
 8000dbc:	f7ff fd11 	bl	80007e2 <MCAL_GPIO_Init>
	// pin 7
	PinCfg.GPIO_PinNumber = GPIO_PIN_7;
 8000dc0:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000dc2:	2280      	movs	r2, #128	; 0x80
 8000dc4:	801a      	strh	r2, [r3, #0]
	PinCfg.GPIO_MODE = GPIO_MODE_Output_PP;
 8000dc6:	4b1c      	ldr	r3, [pc, #112]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000dc8:	2204      	movs	r2, #4
 8000dca:	709a      	strb	r2, [r3, #2]
	PinCfg.GPIO_Output_Speed = GPIO_SPEED_10MHz;
 8000dcc:	4b1a      	ldr	r3, [pc, #104]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000dce:	2201      	movs	r2, #1
 8000dd0:	70da      	strb	r2, [r3, #3]
	MCAL_GPIO_Init(LCD_Port, &PinCfg);
 8000dd2:	4919      	ldr	r1, [pc, #100]	; (8000e38 <HAL_LCD_WRITE_CHAR+0x13c>)
 8000dd4:	4819      	ldr	r0, [pc, #100]	; (8000e3c <HAL_LCD_WRITE_CHAR+0x140>)
 8000dd6:	f7ff fd04 	bl	80007e2 <MCAL_GPIO_Init>

	// if counter = 16 this means the first row is fully
	if(static_counter == 16 )
 8000dda:	4b19      	ldr	r3, [pc, #100]	; (8000e40 <HAL_LCD_WRITE_CHAR+0x144>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	2b10      	cmp	r3, #16
 8000de0:	d104      	bne.n	8000dec <HAL_LCD_WRITE_CHAR+0xf0>
	{
		HAL_LCD_GOTO_XY(2,0);
 8000de2:	2100      	movs	r1, #0
 8000de4:	2002      	movs	r0, #2
 8000de6:	f000 f82d 	bl	8000e44 <HAL_LCD_GOTO_XY>
 8000dea:	e008      	b.n	8000dfe <HAL_LCD_WRITE_CHAR+0x102>
	}
	else if (static_counter == 32) // if the counter = 32 this means the LCD fully
 8000dec:	4b14      	ldr	r3, [pc, #80]	; (8000e40 <HAL_LCD_WRITE_CHAR+0x144>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	2b20      	cmp	r3, #32
 8000df2:	d104      	bne.n	8000dfe <HAL_LCD_WRITE_CHAR+0x102>
	{
		HAL_LCD_CLEAR_SCREEN_FUNC();
 8000df4:	f000 f884 	bl	8000f00 <HAL_LCD_CLEAR_SCREEN_FUNC>
		static_counter = 0 ;
 8000df8:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <HAL_LCD_WRITE_CHAR+0x144>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
	}
	// Write the Character to Data Register
	MCAL_GPIO_WRITE_Port(LCD_Port, CHAR);
 8000dfe:	88fb      	ldrh	r3, [r7, #6]
 8000e00:	4619      	mov	r1, r3
 8000e02:	480e      	ldr	r0, [pc, #56]	; (8000e3c <HAL_LCD_WRITE_CHAR+0x140>)
 8000e04:	f7ff fd83 	bl	800090e <MCAL_GPIO_WRITE_Port>
	static_counter++;
 8000e08:	4b0d      	ldr	r3, [pc, #52]	; (8000e40 <HAL_LCD_WRITE_CHAR+0x144>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	3301      	adds	r3, #1
 8000e0e:	4a0c      	ldr	r2, [pc, #48]	; (8000e40 <HAL_LCD_WRITE_CHAR+0x144>)
 8000e10:	6013      	str	r3, [r2, #0]
	// Reset the RW , Enable RS Pins
	MCAL_GPIO_WRITE_PIN(LCD_Port, RS_SWITCH, GPIO_PIN_SET);
 8000e12:	2201      	movs	r2, #1
 8000e14:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e18:	4808      	ldr	r0, [pc, #32]	; (8000e3c <HAL_LCD_WRITE_CHAR+0x140>)
 8000e1a:	f7ff fd61 	bl	80008e0 <MCAL_GPIO_WRITE_PIN>
	MCAL_GPIO_WRITE_PIN(LCD_Port, RW_SWITCH, GPIO_PIN_RESET);
 8000e1e:	2200      	movs	r2, #0
 8000e20:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e24:	4805      	ldr	r0, [pc, #20]	; (8000e3c <HAL_LCD_WRITE_CHAR+0x140>)
 8000e26:	f7ff fd5b 	bl	80008e0 <MCAL_GPIO_WRITE_PIN>
	HAL_LCD_KICK();
 8000e2a:	f7ff fe6f 	bl	8000b0c <HAL_LCD_KICK>
	wait_ms(2);
	HAL_LCD_KICK();
	static_counter++;
#endif

}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20000064 	.word	0x20000064
 8000e3c:	40010800 	.word	0x40010800
 8000e40:	2000001c 	.word	0x2000001c

08000e44 <HAL_LCD_GOTO_XY>:
void HAL_LCD_GOTO_XY(int line , int position)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b082      	sub	sp, #8
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
 8000e4c:	6039      	str	r1, [r7, #0]
	// check the number of line and check the position then increment the position to line
	if(line == 1)
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2b01      	cmp	r3, #1
 8000e52:	d10d      	bne.n	8000e70 <HAL_LCD_GOTO_XY+0x2c>
	{
		if(position >= 0 && position < 16)
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	db1d      	blt.n	8000e96 <HAL_LCD_GOTO_XY+0x52>
 8000e5a:	683b      	ldr	r3, [r7, #0]
 8000e5c:	2b0f      	cmp	r3, #15
 8000e5e:	dc1a      	bgt.n	8000e96 <HAL_LCD_GOTO_XY+0x52>
		{
			HAL_LCD_WRITE_CMD(LCD_BEGIN_AT_FIRST_ROW + position);
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	b29b      	uxth	r3, r3
 8000e64:	3380      	adds	r3, #128	; 0x80
 8000e66:	b29b      	uxth	r3, r3
 8000e68:	4618      	mov	r0, r3
 8000e6a:	f7ff ff27 	bl	8000cbc <HAL_LCD_WRITE_CMD>
		{
			HAL_LCD_WRITE_CMD(LCD_BEGIN_AT_SECOND_ROW + position);
			static_counter = 16;
		}
	}
}
 8000e6e:	e012      	b.n	8000e96 <HAL_LCD_GOTO_XY+0x52>
	else if(line == 2)
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	2b02      	cmp	r3, #2
 8000e74:	d10f      	bne.n	8000e96 <HAL_LCD_GOTO_XY+0x52>
		if(position >= 0 && position < 16)
 8000e76:	683b      	ldr	r3, [r7, #0]
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	db0c      	blt.n	8000e96 <HAL_LCD_GOTO_XY+0x52>
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	2b0f      	cmp	r3, #15
 8000e80:	dc09      	bgt.n	8000e96 <HAL_LCD_GOTO_XY+0x52>
			HAL_LCD_WRITE_CMD(LCD_BEGIN_AT_SECOND_ROW + position);
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	b29b      	uxth	r3, r3
 8000e86:	33c0      	adds	r3, #192	; 0xc0
 8000e88:	b29b      	uxth	r3, r3
 8000e8a:	4618      	mov	r0, r3
 8000e8c:	f7ff ff16 	bl	8000cbc <HAL_LCD_WRITE_CMD>
			static_counter = 16;
 8000e90:	4b03      	ldr	r3, [pc, #12]	; (8000ea0 <HAL_LCD_GOTO_XY+0x5c>)
 8000e92:	2210      	movs	r2, #16
 8000e94:	601a      	str	r2, [r3, #0]
}
 8000e96:	bf00      	nop
 8000e98:	3708      	adds	r7, #8
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bd80      	pop	{r7, pc}
 8000e9e:	bf00      	nop
 8000ea0:	2000001c 	.word	0x2000001c

08000ea4 <HAL_LCD_WRITE_STRING>:

void HAL_LCD_WRITE_STRING(char* STR)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	// we will create a counter and increment it with every char we display to screen
	// to guard the dimensions of the LCD
	int counter = 0;
 8000eac:	2300      	movs	r3, #0
 8000eae:	60fb      	str	r3, [r7, #12]
	while(*STR > 0)
 8000eb0:	e01d      	b.n	8000eee <HAL_LCD_WRITE_STRING+0x4a>
	{
		// if counter = 16 this means the first row is fully
		if(counter == 16 )
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2b10      	cmp	r3, #16
 8000eb6:	d104      	bne.n	8000ec2 <HAL_LCD_WRITE_STRING+0x1e>
		{
			HAL_LCD_GOTO_XY(2,0);
 8000eb8:	2100      	movs	r1, #0
 8000eba:	2002      	movs	r0, #2
 8000ebc:	f7ff ffc2 	bl	8000e44 <HAL_LCD_GOTO_XY>
 8000ec0:	e00a      	b.n	8000ed8 <HAL_LCD_WRITE_STRING+0x34>
		}
		else if (counter == 32) // if the counter = 32 this means the LCD fully
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	2b20      	cmp	r3, #32
 8000ec6:	d107      	bne.n	8000ed8 <HAL_LCD_WRITE_STRING+0x34>
		{
			HAL_LCD_CLEAR_SCREEN_FUNC();
 8000ec8:	f000 f81a 	bl	8000f00 <HAL_LCD_CLEAR_SCREEN_FUNC>
			HAL_LCD_GOTO_XY(1,0);
 8000ecc:	2100      	movs	r1, #0
 8000ece:	2001      	movs	r0, #1
 8000ed0:	f7ff ffb8 	bl	8000e44 <HAL_LCD_GOTO_XY>
			counter = 0 ;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60fb      	str	r3, [r7, #12]
		}
		// increase the counter and the pointer after display the char
		HAL_LCD_WRITE_CHAR(*STR++);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	1c5a      	adds	r2, r3, #1
 8000edc:	607a      	str	r2, [r7, #4]
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	f7ff ff0a 	bl	8000cfc <HAL_LCD_WRITE_CHAR>
		counter++;
 8000ee8:	68fb      	ldr	r3, [r7, #12]
 8000eea:	3301      	adds	r3, #1
 8000eec:	60fb      	str	r3, [r7, #12]
	while(*STR > 0)
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	781b      	ldrb	r3, [r3, #0]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1dd      	bne.n	8000eb2 <HAL_LCD_WRITE_STRING+0xe>
	}
}
 8000ef6:	bf00      	nop
 8000ef8:	3710      	adds	r7, #16
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <HAL_LCD_CLEAR_SCREEN_FUNC>:
	sprintf(str,"%s%d.%d",sign,IntPart1,IntPart2);
	HAL_LCD_WRITE_STRING(str);

}
void HAL_LCD_CLEAR_SCREEN_FUNC()
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	// Implement the clear screen command
	HAL_LCD_WRITE_CMD(LCD_CLEAR_SCREEN);
 8000f04:	2001      	movs	r0, #1
 8000f06:	f7ff fed9 	bl	8000cbc <HAL_LCD_WRITE_CMD>
	// set the cursor at the begin of the first line
	HAL_LCD_WRITE_CMD(LCD_BEGIN_AT_FIRST_ROW);
 8000f0a:	2080      	movs	r0, #128	; 0x80
 8000f0c:	f7ff fed6 	bl	8000cbc <HAL_LCD_WRITE_CMD>
	// set the static variable in write character function to zero
	static_counter = 0;
 8000f10:	4b02      	ldr	r3, [pc, #8]	; (8000f1c <HAL_LCD_CLEAR_SCREEN_FUNC+0x1c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	601a      	str	r2, [r3, #0]
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	2000001c 	.word	0x2000001c

08000f20 <main>:

// Interrupt service routine of EXTI9
void EXTI9_CallBack(void);

int main(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af00      	add	r7, sp, #0
	// initialize t6he clock
	Clock_init();
 8000f26:	f000 f827 	bl	8000f78 <Clock_init>

	// Initialize the LCD
	HAL_LCD_init();
 8000f2a:	f7ff fe07 	bl	8000b3c <HAL_LCD_init>
	HAL_LCD_CLEAR_SCREEN_FUNC();
 8000f2e:	f7ff ffe7 	bl	8000f00 <HAL_LCD_CLEAR_SCREEN_FUNC>

	// Set the interrupt Configuration
	EXTI_PinConfig_t EXTI_CFG ;
	EXTI_CFG.EXTI_PIN = EXTI9PB9 ;
 8000f32:	4a0e      	ldr	r2, [pc, #56]	; (8000f6c <main+0x4c>)
 8000f34:	1d3b      	adds	r3, r7, #4
 8000f36:	ca07      	ldmia	r2, {r0, r1, r2}
 8000f38:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	EXTI_CFG.Triaggering_Case = EXTI_Triggering_RISING ;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	823b      	strh	r3, [r7, #16]
	EXTI_CFG.P_IRQ_CallBack = EXTI9_CallBack ;
 8000f40:	4b0b      	ldr	r3, [pc, #44]	; (8000f70 <main+0x50>)
 8000f42:	617b      	str	r3, [r7, #20]
	EXTI_CFG.IRQ_EN = EXTI_IRQ_ENABLE ;
 8000f44:	2301      	movs	r3, #1
 8000f46:	827b      	strh	r3, [r7, #18]
	MCAL_EXTI_GPIO_Init(&EXTI_CFG);
 8000f48:	1d3b      	adds	r3, r7, #4
 8000f4a:	4618      	mov	r0, r3
 8000f4c:	f7ff faca 	bl	80004e4 <MCAL_EXTI_GPIO_Init>
	// set the flag
	IRQ_Flag =1 ;
 8000f50:	4b08      	ldr	r3, [pc, #32]	; (8000f74 <main+0x54>)
 8000f52:	2201      	movs	r2, #1
 8000f54:	701a      	strb	r2, [r3, #0]

	while(1)
	{
		if(IRQ_Flag)
 8000f56:	4b07      	ldr	r3, [pc, #28]	; (8000f74 <main+0x54>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d0fb      	beq.n	8000f56 <main+0x36>
		{
			HAL_LCD_CLEAR_SCREEN_FUNC();
 8000f5e:	f7ff ffcf 	bl	8000f00 <HAL_LCD_CLEAR_SCREEN_FUNC>
			// Reset the flag
			IRQ_Flag = 0 ;
 8000f62:	4b04      	ldr	r3, [pc, #16]	; (8000f74 <main+0x54>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	701a      	strb	r2, [r3, #0]
		if(IRQ_Flag)
 8000f68:	e7f5      	b.n	8000f56 <main+0x36>
 8000f6a:	bf00      	nop
 8000f6c:	08001088 	.word	0x08001088
 8000f70:	08000fad 	.word	0x08000fad
 8000f74:	20000068 	.word	0x20000068

08000f78 <Clock_init>:
	}

}

void Clock_init()
{
 8000f78:	b480      	push	{r7}
 8000f7a:	af00      	add	r7, sp, #0
	// initialization for clock of GPIO portA to enable the module
	RCC_GPIOA_CLK_ENABLE();
 8000f7c:	4b0a      	ldr	r3, [pc, #40]	; (8000fa8 <Clock_init+0x30>)
 8000f7e:	699b      	ldr	r3, [r3, #24]
 8000f80:	4a09      	ldr	r2, [pc, #36]	; (8000fa8 <Clock_init+0x30>)
 8000f82:	f043 0304 	orr.w	r3, r3, #4
 8000f86:	6193      	str	r3, [r2, #24]
	// initialization for clock of GPIO portB to enable the module
	RCC_GPIOB_CLK_ENABLE();
 8000f88:	4b07      	ldr	r3, [pc, #28]	; (8000fa8 <Clock_init+0x30>)
 8000f8a:	699b      	ldr	r3, [r3, #24]
 8000f8c:	4a06      	ldr	r2, [pc, #24]	; (8000fa8 <Clock_init+0x30>)
 8000f8e:	f043 0308 	orr.w	r3, r3, #8
 8000f92:	6193      	str	r3, [r2, #24]
	// initialization for clock of AFIO to enable the module
	RCC_AFIO_CLK_ENABLE();
 8000f94:	4b04      	ldr	r3, [pc, #16]	; (8000fa8 <Clock_init+0x30>)
 8000f96:	699b      	ldr	r3, [r3, #24]
 8000f98:	4a03      	ldr	r2, [pc, #12]	; (8000fa8 <Clock_init+0x30>)
 8000f9a:	f043 0301 	orr.w	r3, r3, #1
 8000f9e:	6193      	str	r3, [r2, #24]
}
 8000fa0:	bf00      	nop
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bc80      	pop	{r7}
 8000fa6:	4770      	bx	lr
 8000fa8:	40021000 	.word	0x40021000

08000fac <EXTI9_CallBack>:
void EXTI9_CallBack(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
	// set the flag
	IRQ_Flag =1 ;
 8000fb0:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <EXTI9_CallBack+0x20>)
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	701a      	strb	r2, [r3, #0]
	HAL_LCD_WRITE_STRING("IRQ EXTI is happened _|-  ");
 8000fb6:	4806      	ldr	r0, [pc, #24]	; (8000fd0 <EXTI9_CallBack+0x24>)
 8000fb8:	f7ff ff74 	bl	8000ea4 <HAL_LCD_WRITE_STRING>
	wait_ms(1000);
 8000fbc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000fc0:	f7ff fcb3 	bl	800092a <wait_ms>
	HAL_LCD_CLEAR_SCREEN_FUNC();
 8000fc4:	f7ff ff9c 	bl	8000f00 <HAL_LCD_CLEAR_SCREEN_FUNC>



}
 8000fc8:	bf00      	nop
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	20000068 	.word	0x20000068
 8000fd0:	08001094 	.word	0x08001094

08000fd4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fd4:	480d      	ldr	r0, [pc, #52]	; (800100c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fd6:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000fd8:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fdc:	480c      	ldr	r0, [pc, #48]	; (8001010 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fde:	490d      	ldr	r1, [pc, #52]	; (8001014 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fe0:	4a0d      	ldr	r2, [pc, #52]	; (8001018 <LoopForever+0xe>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe4:	e002      	b.n	8000fec <LoopCopyDataInit>

08000fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fea:	3304      	adds	r3, #4

08000fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff0:	d3f9      	bcc.n	8000fe6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff2:	4a0a      	ldr	r2, [pc, #40]	; (800101c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ff4:	4c0a      	ldr	r4, [pc, #40]	; (8001020 <LoopForever+0x16>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff8:	e001      	b.n	8000ffe <LoopFillZerobss>

08000ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ffc:	3204      	adds	r2, #4

08000ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001000:	d3fb      	bcc.n	8000ffa <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8001002:	f000 f811 	bl	8001028 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001006:	f7ff ff8b 	bl	8000f20 <main>

0800100a <LoopForever>:

LoopForever:
    b LoopForever
 800100a:	e7fe      	b.n	800100a <LoopForever>
  ldr   r0, =_estack
 800100c:	20002800 	.word	0x20002800
  ldr r0, =_sdata
 8001010:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001014:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8001018:	080010b8 	.word	0x080010b8
  ldr r2, =_sbss
 800101c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8001020:	2000006c 	.word	0x2000006c

08001024 <ADC1_2_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001024:	e7fe      	b.n	8001024 <ADC1_2_IRQHandler>
	...

08001028 <__libc_init_array>:
 8001028:	b570      	push	{r4, r5, r6, lr}
 800102a:	2500      	movs	r5, #0
 800102c:	4e0c      	ldr	r6, [pc, #48]	; (8001060 <__libc_init_array+0x38>)
 800102e:	4c0d      	ldr	r4, [pc, #52]	; (8001064 <__libc_init_array+0x3c>)
 8001030:	1ba4      	subs	r4, r4, r6
 8001032:	10a4      	asrs	r4, r4, #2
 8001034:	42a5      	cmp	r5, r4
 8001036:	d109      	bne.n	800104c <__libc_init_array+0x24>
 8001038:	f000 f81a 	bl	8001070 <_init>
 800103c:	2500      	movs	r5, #0
 800103e:	4e0a      	ldr	r6, [pc, #40]	; (8001068 <__libc_init_array+0x40>)
 8001040:	4c0a      	ldr	r4, [pc, #40]	; (800106c <__libc_init_array+0x44>)
 8001042:	1ba4      	subs	r4, r4, r6
 8001044:	10a4      	asrs	r4, r4, #2
 8001046:	42a5      	cmp	r5, r4
 8001048:	d105      	bne.n	8001056 <__libc_init_array+0x2e>
 800104a:	bd70      	pop	{r4, r5, r6, pc}
 800104c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001050:	4798      	blx	r3
 8001052:	3501      	adds	r5, #1
 8001054:	e7ee      	b.n	8001034 <__libc_init_array+0xc>
 8001056:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800105a:	4798      	blx	r3
 800105c:	3501      	adds	r5, #1
 800105e:	e7f2      	b.n	8001046 <__libc_init_array+0x1e>
 8001060:	080010b0 	.word	0x080010b0
 8001064:	080010b0 	.word	0x080010b0
 8001068:	080010b0 	.word	0x080010b0
 800106c:	080010b4 	.word	0x080010b4

08001070 <_init>:
 8001070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001072:	bf00      	nop
 8001074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001076:	bc08      	pop	{r3}
 8001078:	469e      	mov	lr, r3
 800107a:	4770      	bx	lr

0800107c <_fini>:
 800107c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800107e:	bf00      	nop
 8001080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001082:	bc08      	pop	{r3}
 8001084:	469e      	mov	lr, r3
 8001086:	4770      	bx	lr
