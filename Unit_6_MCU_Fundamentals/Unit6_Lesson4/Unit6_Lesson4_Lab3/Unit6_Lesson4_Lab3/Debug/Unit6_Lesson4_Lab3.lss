
Unit6_Lesson4_Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000018e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001e2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001e2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000214  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000048  00000000  00000000  00000250  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000006e6  00000000  00000000  00000298  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005b4  00000000  00000000  0000097e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000336  00000000  00000000  00000f32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000c8  00000000  00000000  00001268  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000366  00000000  00000000  00001330  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001da  00000000  00000000  00001696  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00001870  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 71 00 	jmp	0xe2	; 0xe2 <__vector_1>
   8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_2>
   c:	0c 94 a9 00 	jmp	0x152	; 0x152 <__vector_3>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 63 00 	call	0xc6	; 0xc6 <main>
  64:	0c 94 c5 00 	jmp	0x18a	; 0x18a <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <INTERUPT_INIT>:
    }
}
void INTERUPT_INIT()
{
	// enable the interrupt module 
	sei();
  6c:	78 94       	sei
	// set INT0 to change with any logical change  
	SET_BIT(MCUCR,0);
  6e:	85 b7       	in	r24, 0x35	; 53
  70:	81 60       	ori	r24, 0x01	; 1
  72:	85 bf       	out	0x35, r24	; 53
	RESET_BIT(MCUCR,1);
  74:	85 b7       	in	r24, 0x35	; 53
  76:	8d 7f       	andi	r24, 0xFD	; 253
  78:	85 bf       	out	0x35, r24	; 53
	// set INT1 to change with raising edge 
    SET_BIT(MCUCR,3);
  7a:	85 b7       	in	r24, 0x35	; 53
  7c:	88 60       	ori	r24, 0x08	; 8
  7e:	85 bf       	out	0x35, r24	; 53
	SET_BIT(MCUCR,4);
  80:	85 b7       	in	r24, 0x35	; 53
  82:	80 61       	ori	r24, 0x10	; 16
  84:	85 bf       	out	0x35, r24	; 53
	// set INT1 to change with falling edge 
	SET_BIT(MCUCR,6);
  86:	85 b7       	in	r24, 0x35	; 53
  88:	80 64       	ori	r24, 0x40	; 64
  8a:	85 bf       	out	0x35, r24	; 53
	
	// enable the external interrupt INT0 , INT1 and INT2
	SET_BIT(GICR,5);
  8c:	8b b7       	in	r24, 0x3b	; 59
  8e:	80 62       	ori	r24, 0x20	; 32
  90:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(GICR,6);
  92:	8b b7       	in	r24, 0x3b	; 59
  94:	80 64       	ori	r24, 0x40	; 64
  96:	8b bf       	out	0x3b, r24	; 59
	SET_BIT(GICR,7);
  98:	8b b7       	in	r24, 0x3b	; 59
  9a:	80 68       	ori	r24, 0x80	; 128
  9c:	8b bf       	out	0x3b, r24	; 59
  9e:	08 95       	ret

000000a0 <GPIO_INIT>:

}
void GPIO_INIT()
{
	// Set the direction of the 5 , 6 , 7 pins 
	SET_BIT(DDRD,5);
  a0:	81 b3       	in	r24, 0x11	; 17
  a2:	80 62       	ori	r24, 0x20	; 32
  a4:	81 bb       	out	0x11, r24	; 17
    SET_BIT(DDRD,6);
  a6:	81 b3       	in	r24, 0x11	; 17
  a8:	80 64       	ori	r24, 0x40	; 64
  aa:	81 bb       	out	0x11, r24	; 17
	SET_BIT(DDRD,7);
  ac:	81 b3       	in	r24, 0x11	; 17
  ae:	80 68       	ori	r24, 0x80	; 128
  b0:	81 bb       	out	0x11, r24	; 17
	// clear the pins 
	RESET_BIT(PORTD,5);
  b2:	82 b3       	in	r24, 0x12	; 18
  b4:	8f 7d       	andi	r24, 0xDF	; 223
  b6:	82 bb       	out	0x12, r24	; 18
	RESET_BIT(PORTD,6);
  b8:	82 b3       	in	r24, 0x12	; 18
  ba:	8f 7b       	andi	r24, 0xBF	; 191
  bc:	82 bb       	out	0x12, r24	; 18
	RESET_BIT(PORTD,7);
  be:	82 b3       	in	r24, 0x12	; 18
  c0:	8f 77       	andi	r24, 0x7F	; 127
  c2:	82 bb       	out	0x12, r24	; 18
  c4:	08 95       	ret

000000c6 <main>:
void GPIO_INIT();


int main(void)
{
	INTERUPT_INIT();
  c6:	0e 94 36 00 	call	0x6c	; 0x6c <INTERUPT_INIT>
    GPIO_INIT();
  ca:	0e 94 50 00 	call	0xa0	; 0xa0 <GPIO_INIT>
    while (1) 
    {
		// clear the pins to turn off any led 
		RESET_BIT(PORTD,5);
  ce:	82 b3       	in	r24, 0x12	; 18
  d0:	8f 7d       	andi	r24, 0xDF	; 223
  d2:	82 bb       	out	0x12, r24	; 18
		RESET_BIT(PORTD,6);
  d4:	82 b3       	in	r24, 0x12	; 18
  d6:	8f 7b       	andi	r24, 0xBF	; 191
  d8:	82 bb       	out	0x12, r24	; 18
		RESET_BIT(PORTD,7);
  da:	82 b3       	in	r24, 0x12	; 18
  dc:	8f 77       	andi	r24, 0x7F	; 127
  de:	82 bb       	out	0x12, r24	; 18
  e0:	f6 cf       	rjmp	.-20     	; 0xce <main+0x8>

000000e2 <__vector_1>:
	RESET_BIT(PORTD,6);
	RESET_BIT(PORTD,7);
}
// external interrupt 0 >>>> PORTD pin 5 
ISR(INT0_vect)
{
  e2:	1f 92       	push	r1
  e4:	0f 92       	push	r0
  e6:	0f b6       	in	r0, 0x3f	; 63
  e8:	0f 92       	push	r0
  ea:	11 24       	eor	r1, r1
  ec:	2f 93       	push	r18
  ee:	8f 93       	push	r24
  f0:	9f 93       	push	r25
	// set the pin to turn on the led
	SET_BIT(PORTD,5);
  f2:	82 b3       	in	r24, 0x12	; 18
  f4:	80 62       	ori	r24, 0x20	; 32
  f6:	82 bb       	out	0x12, r24	; 18
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  f8:	2f e3       	ldi	r18, 0x3F	; 63
  fa:	8d e0       	ldi	r24, 0x0D	; 13
  fc:	93 e0       	ldi	r25, 0x03	; 3
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	80 40       	sbci	r24, 0x00	; 0
 102:	90 40       	sbci	r25, 0x00	; 0
 104:	e1 f7       	brne	.-8      	; 0xfe <__vector_1+0x1c>
 106:	00 c0       	rjmp	.+0      	; 0x108 <__vector_1+0x26>
 108:	00 00       	nop
	// wait for 1s 
	_delay_ms(1000);
}
 10a:	9f 91       	pop	r25
 10c:	8f 91       	pop	r24
 10e:	2f 91       	pop	r18
 110:	0f 90       	pop	r0
 112:	0f be       	out	0x3f, r0	; 63
 114:	0f 90       	pop	r0
 116:	1f 90       	pop	r1
 118:	18 95       	reti

0000011a <__vector_2>:
// external interrupt 1 >>>> PORTD pin 6
ISR(INT1_vect)
{
 11a:	1f 92       	push	r1
 11c:	0f 92       	push	r0
 11e:	0f b6       	in	r0, 0x3f	; 63
 120:	0f 92       	push	r0
 122:	11 24       	eor	r1, r1
 124:	2f 93       	push	r18
 126:	8f 93       	push	r24
 128:	9f 93       	push	r25
	// set the pin to turn on the led
	SET_BIT(PORTD,6);
 12a:	82 b3       	in	r24, 0x12	; 18
 12c:	80 64       	ori	r24, 0x40	; 64
 12e:	82 bb       	out	0x12, r24	; 18
 130:	2f e3       	ldi	r18, 0x3F	; 63
 132:	8d e0       	ldi	r24, 0x0D	; 13
 134:	93 e0       	ldi	r25, 0x03	; 3
 136:	21 50       	subi	r18, 0x01	; 1
 138:	80 40       	sbci	r24, 0x00	; 0
 13a:	90 40       	sbci	r25, 0x00	; 0
 13c:	e1 f7       	brne	.-8      	; 0x136 <__vector_2+0x1c>
 13e:	00 c0       	rjmp	.+0      	; 0x140 <__vector_2+0x26>
 140:	00 00       	nop
	// wait for 1s
	_delay_ms(1000);
}
 142:	9f 91       	pop	r25
 144:	8f 91       	pop	r24
 146:	2f 91       	pop	r18
 148:	0f 90       	pop	r0
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	0f 90       	pop	r0
 14e:	1f 90       	pop	r1
 150:	18 95       	reti

00000152 <__vector_3>:
// external interrupt 2 >>>> PORTD pin 7
ISR(INT2_vect)
{
 152:	1f 92       	push	r1
 154:	0f 92       	push	r0
 156:	0f b6       	in	r0, 0x3f	; 63
 158:	0f 92       	push	r0
 15a:	11 24       	eor	r1, r1
 15c:	2f 93       	push	r18
 15e:	8f 93       	push	r24
 160:	9f 93       	push	r25
	// set the pin to turn on the led
	SET_BIT(PORTD,7);
 162:	82 b3       	in	r24, 0x12	; 18
 164:	80 68       	ori	r24, 0x80	; 128
 166:	82 bb       	out	0x12, r24	; 18
 168:	2f e3       	ldi	r18, 0x3F	; 63
 16a:	8d e0       	ldi	r24, 0x0D	; 13
 16c:	93 e0       	ldi	r25, 0x03	; 3
 16e:	21 50       	subi	r18, 0x01	; 1
 170:	80 40       	sbci	r24, 0x00	; 0
 172:	90 40       	sbci	r25, 0x00	; 0
 174:	e1 f7       	brne	.-8      	; 0x16e <__vector_3+0x1c>
 176:	00 c0       	rjmp	.+0      	; 0x178 <__vector_3+0x26>
 178:	00 00       	nop
	// wait for 1s
	_delay_ms(1000);
}
 17a:	9f 91       	pop	r25
 17c:	8f 91       	pop	r24
 17e:	2f 91       	pop	r18
 180:	0f 90       	pop	r0
 182:	0f be       	out	0x3f, r0	; 63
 184:	0f 90       	pop	r0
 186:	1f 90       	pop	r1
 188:	18 95       	reti

0000018a <_exit>:
 18a:	f8 94       	cli

0000018c <__stop_program>:
 18c:	ff cf       	rjmp	.-2      	; 0x18c <__stop_program>
